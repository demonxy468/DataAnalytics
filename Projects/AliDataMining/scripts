{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 写入数据"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instance_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_category_list</th>\n",
       "      <th>item_property_list</th>\n",
       "      <th>item_brand_id</th>\n",
       "      <th>item_city_id</th>\n",
       "      <th>item_price_level</th>\n",
       "      <th>item_sales_level</th>\n",
       "      <th>item_collected_level</th>\n",
       "      <th>item_pv_level</th>\n",
       "      <th>...</th>\n",
       "      <th>context_page_id</th>\n",
       "      <th>predict_category_property</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>shop_review_num_level</th>\n",
       "      <th>shop_review_positive_rate</th>\n",
       "      <th>shop_star_level</th>\n",
       "      <th>shop_score_service</th>\n",
       "      <th>shop_score_delivery</th>\n",
       "      <th>shop_score_description</th>\n",
       "      <th>is_trade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>108641074714126964</td>\n",
       "      <td>3412720377098676069</td>\n",
       "      <td>7908382889764677758;5799347067982556520</td>\n",
       "      <td>2072967855524022579;5131280576272319091;263639...</td>\n",
       "      <td>1975590437749032870</td>\n",
       "      <td>3948283326616421003</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>4006</td>\n",
       "      <td>5799347067982556520:-1;509660095530134768:-1;5...</td>\n",
       "      <td>6765930309048922341</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5754713551599725161</td>\n",
       "      <td>3412720377098676069</td>\n",
       "      <td>7908382889764677758;5799347067982556520</td>\n",
       "      <td>2072967855524022579;5131280576272319091;263639...</td>\n",
       "      <td>1975590437749032870</td>\n",
       "      <td>3948283326616421003</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>4001</td>\n",
       "      <td>5799347067982556520:9172976955054793469;790838...</td>\n",
       "      <td>6765930309048922341</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           instance_id              item_id  \\\n",
       "0   108641074714126964  3412720377098676069   \n",
       "1  5754713551599725161  3412720377098676069   \n",
       "\n",
       "                        item_category_list  \\\n",
       "0  7908382889764677758;5799347067982556520   \n",
       "1  7908382889764677758;5799347067982556520   \n",
       "\n",
       "                                  item_property_list        item_brand_id  \\\n",
       "0  2072967855524022579;5131280576272319091;263639...  1975590437749032870   \n",
       "1  2072967855524022579;5131280576272319091;263639...  1975590437749032870   \n",
       "\n",
       "          item_city_id  item_price_level  item_sales_level  \\\n",
       "0  3948283326616421003                 3                 3   \n",
       "1  3948283326616421003                 3                 3   \n",
       "\n",
       "   item_collected_level  item_pv_level    ...     context_page_id  \\\n",
       "0                     4             14    ...                4006   \n",
       "1                     4             14    ...                4001   \n",
       "\n",
       "                           predict_category_property              shop_id  \\\n",
       "0  5799347067982556520:-1;509660095530134768:-1;5...  6765930309048922341   \n",
       "1  5799347067982556520:9172976955054793469;790838...  6765930309048922341   \n",
       "\n",
       "   shop_review_num_level  shop_review_positive_rate  shop_star_level  \\\n",
       "0                      4                        1.0             5002   \n",
       "1                      4                        1.0             5002   \n",
       "\n",
       "   shop_score_service  shop_score_delivery shop_score_description  is_trade  \n",
       "0                 1.0                  1.0                    1.0         0  \n",
       "1                 1.0                  1.0                    1.0         0  \n",
       "\n",
       "[2 rows x 27 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "import pandas as pd\n",
    "import csv\n",
    "import xgboost as xgb\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import os\n",
    "\n",
    "\n",
    "from numpy import loadtxt\n",
    "from xgboost import XGBClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "\n",
    "from xgboost import plot_importance\n",
    "from matplotlib import pyplot\n",
    "\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import StratifiedKFold\n",
    "\n",
    "# 链接：https://www.jianshu.com/p/7e0e2d66b3d4\n",
    "from sklearn.utils import resample\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn import preprocessing\n",
    "import datetime\n",
    "\n",
    "from sklearn.metrics import log_loss\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import style\n",
    "style.use(\"ggplot\")\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "import _thread\n",
    "import time\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "start = time.time()\n",
    "\n",
    "\n",
    "# ads = pd.read_csv('./train_clean.csv')\n",
    "ads = pd.read_csv('./round1_ijcai_18_train_20180301.csv')\n",
    "ads.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "pd.set_option('display.max_columns', None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 下面进行一些feature engineering  后面换数据集的话，注意调整topN的阀值"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "###################################          #itemid TopN          ##########################################\n",
    "\n",
    "\n",
    "gp = ads.groupby(by='item_id')\n",
    "newdf=gp.size().reset_index(name='times') \n",
    "\n",
    "pop_brands_low = newdf[newdf['times']<=200]['item_id'].unique()     #选100还是200\n",
    "\n",
    "\n",
    "def itemid_cvt(num):\n",
    "    if num in pop_brands_low:\n",
    "        return 1\n",
    "\n",
    "    else:\n",
    "        return num\n",
    "\n",
    "    \n",
    "ads['item_id'] = ads['item_id'].apply(itemid_cvt)\n",
    "\n",
    "le = LabelEncoder()\n",
    "le.fit(ads['item_id'])\n",
    "ads['item_id'] = le.transform(ads['item_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "###################################           #brand TopN       ##########################################\n",
    "gp = ads.groupby(by='item_brand_id')\n",
    "newdf=gp.size().reset_index(name='times') \n",
    "\n",
    "pop_brands_low = newdf[newdf['times']<=20]['item_brand_id'].unique()\n",
    "\n",
    "\n",
    "def brand_cvt(num):\n",
    "    if num in pop_brands_low:\n",
    "        return 1\n",
    "\n",
    "    else:\n",
    "        return num\n",
    "\n",
    "    \n",
    "ads['item_brand_id'] = ads['item_brand_id'].apply(brand_cvt)\n",
    "\n",
    "le = LabelEncoder()\n",
    "le.fit(ads['item_brand_id'])\n",
    "ads['item_brand_id'] = le.transform(ads['item_brand_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "###################################           #city TopN       ##########################################\n",
    "\n",
    "\n",
    "gp = ads.groupby(by='item_city_id')\n",
    "newdf=gp.size().reset_index(name='times') \n",
    "# newdf[newdf['times']>100].shape[0] #这个100是可以调整的 \n",
    "\n",
    "pop_brands_low = newdf[newdf['times']<=50]['item_city_id'].unique()\n",
    "\n",
    "\n",
    "def city_cvt(num):\n",
    "    if num in pop_brands_low:\n",
    "        return 1\n",
    "\n",
    "    else:\n",
    "        return num\n",
    "\n",
    "    \n",
    "ads['item_city_id'] = ads['item_city_id'].apply(city_cvt)\n",
    "\n",
    "le = LabelEncoder()\n",
    "le.fit(ads['item_city_id'])\n",
    "ads['item_city_id'] = le.transform(ads['item_city_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instance_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_category_list</th>\n",
       "      <th>item_property_list</th>\n",
       "      <th>item_brand_id</th>\n",
       "      <th>item_city_id</th>\n",
       "      <th>item_price_level</th>\n",
       "      <th>item_sales_level</th>\n",
       "      <th>item_collected_level</th>\n",
       "      <th>item_pv_level</th>\n",
       "      <th>...</th>\n",
       "      <th>predict_category_property</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>len_pred_cat</th>\n",
       "      <th>shop_review_num_level</th>\n",
       "      <th>shop_review_positive_rate</th>\n",
       "      <th>shop_star_level</th>\n",
       "      <th>shop_score_service</th>\n",
       "      <th>shop_score_delivery</th>\n",
       "      <th>shop_score_description</th>\n",
       "      <th>is_trade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>108641074714126964</td>\n",
       "      <td>0</td>\n",
       "      <td>7908382889764677758;5799347067982556520</td>\n",
       "      <td>2072967855524022579;5131280576272319091;263639...</td>\n",
       "      <td>225</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>5799347067982556520:-1;509660095530134768:-1;5...</td>\n",
       "      <td>6765930309048922341</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          instance_id  item_id                       item_category_list  \\\n",
       "0  108641074714126964        0  7908382889764677758;5799347067982556520   \n",
       "\n",
       "                                  item_property_list  item_brand_id  \\\n",
       "0  2072967855524022579;5131280576272319091;263639...            225   \n",
       "\n",
       "   item_city_id  item_price_level  item_sales_level  item_collected_level  \\\n",
       "0            33                 3                 3                     4   \n",
       "\n",
       "   item_pv_level    ...                             predict_category_property  \\\n",
       "0             14    ...     5799347067982556520:-1;509660095530134768:-1;5...   \n",
       "\n",
       "               shop_id  len_pred_cat  shop_review_num_level  \\\n",
       "0  6765930309048922341             5                      4   \n",
       "\n",
       "   shop_review_positive_rate  shop_star_level  shop_score_service  \\\n",
       "0                        1.0             5002                 1.0   \n",
       "\n",
       "   shop_score_delivery shop_score_description  is_trade  \n",
       "0                  1.0                    1.0         0  \n",
       "\n",
       "[1 rows x 28 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "###################################           新特征len_predcat       ##########################################\n",
    "\n",
    "#再对对item_property_list进行长度分析\n",
    "#看每一行长度,越长表明本行越长，商品信息越丰富\n",
    "df = ads['predict_category_property'].str.split(';',expand=True)\n",
    "df.columns = [\"len_\"+str (i) for i in range(len(df.columns))]\n",
    "ads.insert(20, 'len_pred_cat', df.count(axis=1) )\n",
    "ads.head(1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 上面是新加特征"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instance_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_category_list</th>\n",
       "      <th>item_property_list</th>\n",
       "      <th>item_brand_id</th>\n",
       "      <th>item_city_id</th>\n",
       "      <th>item_price_level</th>\n",
       "      <th>item_sales_level</th>\n",
       "      <th>item_collected_level</th>\n",
       "      <th>item_pv_level</th>\n",
       "      <th>...</th>\n",
       "      <th>shop_star_level</th>\n",
       "      <th>shop_score_service</th>\n",
       "      <th>shop_score_delivery</th>\n",
       "      <th>shop_score_description</th>\n",
       "      <th>is_trade</th>\n",
       "      <th>time</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>user_query_day</th>\n",
       "      <th>user_query_day_hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>108641074714126964</td>\n",
       "      <td>0</td>\n",
       "      <td>7908382889764677758;5799347067982556520</td>\n",
       "      <td>2072967855524022579;5131280576272319091;263639...</td>\n",
       "      <td>225</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>5002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-09-17 22:09:04</td>\n",
       "      <td>17</td>\n",
       "      <td>22</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5754713551599725161</td>\n",
       "      <td>0</td>\n",
       "      <td>7908382889764677758;5799347067982556520</td>\n",
       "      <td>2072967855524022579;5131280576272319091;263639...</td>\n",
       "      <td>225</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>5002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-09-18 00:00:32</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 33 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           instance_id  item_id                       item_category_list  \\\n",
       "0   108641074714126964        0  7908382889764677758;5799347067982556520   \n",
       "1  5754713551599725161        0  7908382889764677758;5799347067982556520   \n",
       "\n",
       "                                  item_property_list  item_brand_id  \\\n",
       "0  2072967855524022579;5131280576272319091;263639...            225   \n",
       "1  2072967855524022579;5131280576272319091;263639...            225   \n",
       "\n",
       "   item_city_id  item_price_level  item_sales_level  item_collected_level  \\\n",
       "0            33                 3                 3                     4   \n",
       "1            33                 3                 3                     4   \n",
       "\n",
       "   item_pv_level         ...           shop_star_level  shop_score_service  \\\n",
       "0             14         ...                      5002                 1.0   \n",
       "1             14         ...                      5002                 1.0   \n",
       "\n",
       "   shop_score_delivery  shop_score_description  is_trade                 time  \\\n",
       "0                  1.0                     1.0         0  2018-09-17 22:09:04   \n",
       "1                  1.0                     1.0         0  2018-09-18 00:00:32   \n",
       "\n",
       "   day  hour user_query_day  user_query_day_hour  \n",
       "0   17    22              3                    3  \n",
       "1   18     0              9                    5  \n",
       "\n",
       "[2 rows x 33 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "########################################          Timestamp      ############################################\n",
    "\n",
    "\n",
    "\n",
    "def timestamp_datetime(value):\n",
    "    format = '%Y-%m-%d %H:%M:%S'\n",
    "    value = time.localtime(value)\n",
    "    dt = time.strftime(format, value)\n",
    "    return dt\n",
    "\n",
    "\n",
    "def convert_data(data):\n",
    "    data['time'] = data.context_timestamp.apply(timestamp_datetime)\n",
    "    data['day'] = data.time.apply(lambda x: int(x[8:10]))\n",
    "    data['hour'] = data.time.apply(lambda x: int(x[11:13]))\n",
    "    user_query_day = data.groupby(['user_id', 'day']).size(\n",
    "    ).reset_index().rename(columns={0: 'user_query_day'})\n",
    "    data = pd.merge(data, user_query_day, 'left', on=['user_id', 'day'])\n",
    "    user_query_day_hour = data.groupby(['user_id', 'day', 'hour']).size().reset_index().rename(\n",
    "        columns={0: 'user_query_day_hour'})\n",
    "    data = pd.merge(data, user_query_day_hour, 'left',\n",
    "                    on=['user_id', 'day', 'hour'])\n",
    "    \n",
    "    return data\n",
    "\n",
    "ads = convert_data(ads)\n",
    "ads.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# def bin_time(num):\n",
    "#     if num in [13,14,15,16,17,18]:\n",
    "#         num=14\n",
    "#     elif num in[19,20]:\n",
    "#         num=15\n",
    "#     elif num in [21, 22,23]:\n",
    "#         num =num-5\n",
    "#     else:\n",
    "#         num = num +1\n",
    "#     return num\n",
    "\n",
    "# ads['context_timestamp'] = ads['context_timestamp'].apply(bin_time)\n",
    "# ads['context_timestamp'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#对时间进行bin操作\n",
    "\n",
    "# def bin_time(num):\n",
    "#     if num in [13,14,15,16,17,18]:\n",
    "#         num=14\n",
    "#     elif num in[19,20]:\n",
    "#         num=15\n",
    "#     elif num in [21, 22,23]:\n",
    "#         num =num-5\n",
    "#     else:\n",
    "#         num = num +1\n",
    "#     return num\n",
    "\n",
    "# ads['context_timestamp'] = ads['context_timestamp'].apply(bin_time)\n",
    "# ads['context_timestamp'].unique()\n",
    "\n",
    "\n",
    "# ###在这里创建新特征compare_cate:如果该item在后面pred出现，赋值为1,否则为0\n",
    "\n",
    "\n",
    "# ads['item_category_list'] = ads['item_category_list'].apply(str)\n",
    "\n",
    "# def compare_category(row):\n",
    "#     if row['item_category_list'] in row['predict_category_property']:\n",
    "#         return 1\n",
    "#     else:\n",
    "#         return 0\n",
    "\n",
    "    \n",
    "# compare_categ = ads.apply(compare_category, axis=1)\n",
    "# ads.insert(14, 'compare_category', compare_categ)\n",
    "# ads.head(2)\n",
    "\n",
    "\n",
    "# ###在这里创建新特征compare_ppt:对于每个后面的predict_category_property，若出现x个在item_property_list，那么就x*weight来赋值\n",
    "# #先分解item_property_list \n",
    "# import time\n",
    "# s=time.time()\n",
    "\n",
    "\n",
    "# df = ads['item_property_list'].str.split(';',expand=True)\n",
    "\n",
    "# #存储新feature\n",
    "# temp = pd.DataFrame(np.zeros((df.shape[0],1), dtype=int), columns=['compare_ppt'])\n",
    "# for i in range(0, df.shape[0]):\n",
    "#     a=0\n",
    "#     for j in range(0, df.shape[1]):\n",
    "#         if df.loc[i, j] is None:\n",
    "#             pass\n",
    "#         elif df.loc[i, j] not in ads.loc[i,'predict_category_property']:\n",
    "#             pass\n",
    "        \n",
    "#         else:\n",
    "#             a = a+1\n",
    "\n",
    "#     temp.loc[i, 'compare_ppt'] = a\n",
    "\n",
    "\n",
    "# ####插入新feature\n",
    "# ads.insert(15, 'compare_ppt', temp['compare_ppt'])\n",
    "\n",
    "# e=time.time()\n",
    "# print(e-s)\n",
    "# ads.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n0.853855125781 \\t item_collected_level \\t item_sales_level\\n0.757697254859 \\t item_pv_level \\t item_sales_level\\n0.672120340537 \\t item_pv_level \\t item_collected_level\\n0.999464268562 \\t user_occupation_id \\t user_age_level\\n0.999459654776 \\t user_star_level \\t user_age_level\\n0.999683898893 \\t user_star_level \\t user_occupation_id\\n0.463273190264 \\t shop_review_num_level \\t item_sales_level\\n0.496431056543 \\t shop_review_num_level \\t item_collected_level\\n0.459292574948 \\t shop_star_level \\t item_sales_level\\n0.495633526375 \\t shop_star_level \\t item_collected_level\\n0.986986984301 \\t shop_star_level \\t shop_review_num_level\\n0.994215577652 \\t shop_score_delivery \\t shop_score_service\\n0.46575561048 \\t shop_score_description \\t shop_review_positive_rate\\n0.938355193265 \\t shop_score_description \\t shop_score_service\\n0.931127706876 \\t shop_score_description \\t shop_score_delivery\\n'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##########这个model特别在于跨表格交互项,和上面#删除item_category_list，item_property_list\n",
    "#自身的特征处理与交互项的设计，之后全部扔进模型，判断importance\n",
    "\n",
    "\n",
    "\"\"\"\n",
    "0.853855125781 \t item_collected_level \t item_sales_level\n",
    "0.757697254859 \t item_pv_level \t item_sales_level\n",
    "0.672120340537 \t item_pv_level \t item_collected_level\n",
    "0.999464268562 \t user_occupation_id \t user_age_level\n",
    "0.999459654776 \t user_star_level \t user_age_level\n",
    "0.999683898893 \t user_star_level \t user_occupation_id\n",
    "0.463273190264 \t shop_review_num_level \t item_sales_level\n",
    "0.496431056543 \t shop_review_num_level \t item_collected_level\n",
    "0.459292574948 \t shop_star_level \t item_sales_level\n",
    "0.495633526375 \t shop_star_level \t item_collected_level\n",
    "0.986986984301 \t shop_star_level \t shop_review_num_level\n",
    "0.994215577652 \t shop_score_delivery \t shop_score_service\n",
    "0.46575561048 \t shop_score_description \t shop_review_positive_rate\n",
    "0.938355193265 \t shop_score_description \t shop_score_service\n",
    "0.931127706876 \t shop_score_description \t shop_score_delivery\n",
    "\"\"\"\n",
    "\n",
    "###############################################################################################################\n",
    "###############################################################################################################\n",
    "###############################################################################################################\n",
    "###############################################################################################################\n",
    "###############################################################################################################"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# #item几个bin特征工程\n",
    "\n",
    "# #bin操作item_sales_level  0,1-5,6,7,...,14,15-17\n",
    "def bin_sales(num):\n",
    "    if num in [1,2,3,4,5]:\n",
    "        num=3\n",
    "    elif num in[15,16,17]:\n",
    "        num =16\n",
    "    elif num == 0:\n",
    "        num = 1\n",
    "    else:\n",
    "        num = num\n",
    "    return num\n",
    "ads['item_sales_level'] = ads['item_sales_level'].apply(bin_sales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # item_collected_level   0-2, 3-5, 6-8, 9, 10, ...,15, 16-17\n",
    "def bin_collected(num):\n",
    "    if num in [0,1,2]:\n",
    "        num=1\n",
    "    elif num in[3,4,5]:\n",
    "        num =2\n",
    "    elif num in [6,7,8]:\n",
    "        num = 3\n",
    "    elif num in [16,17]:\n",
    "        num = 11\n",
    "    else:\n",
    "        num = num-5\n",
    "    return num\n",
    "\n",
    "\n",
    "ads['item_collected_level'] = ads['item_collected_level'].apply(bin_collected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(477147, 34)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#################################     对item_property_list 进行聚类     ######################################\n",
    "\n",
    "#用item_property_list列生成新的数据集，用于聚类\n",
    "df = ads['item_property_list'].str.split(';',expand=True)\n",
    "df.columns = [\"property_\"+str (i) for i in range(len(df.columns))]\n",
    "df = df.fillna(-1)\n",
    "\n",
    "#把string格式转换成integer格式来运行聚类算法\n",
    "def toInt(raw_str):\n",
    "    return int(raw_str)\n",
    "\n",
    "temp_x = [df[df.columns[i]].apply(toInt) for i in range(len(df.columns))]\n",
    "\n",
    "#把dataframe变成array作为聚类算法的输入\n",
    "item_property_list = pd.concat(temp_x, axis=1)\n",
    "X = item_property_list.as_matrix()\n",
    "\n",
    "#商品总共14个类别，所以针对property取14个cluster\n",
    "kmeans = KMeans(n_clusters=14)\n",
    "kmeans.fit(X)\n",
    "\n",
    "centroids = kmeans.cluster_centers_\n",
    "labels = kmeans.labels_\n",
    "ads.insert(22, 'property_label', labels)\n",
    "ads.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "这里直接split然后取list的长度就会快很多，不需要转化成df再数再insert"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instance_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_category_list</th>\n",
       "      <th>item_property_list</th>\n",
       "      <th>item_brand_id</th>\n",
       "      <th>item_city_id</th>\n",
       "      <th>item_price_level</th>\n",
       "      <th>item_sales_level</th>\n",
       "      <th>item_collected_level</th>\n",
       "      <th>item_pv_level</th>\n",
       "      <th>user_id</th>\n",
       "      <th>user_gender_id</th>\n",
       "      <th>user_age_level</th>\n",
       "      <th>user_occupation_id</th>\n",
       "      <th>user_star_level</th>\n",
       "      <th>context_id</th>\n",
       "      <th>context_timestamp</th>\n",
       "      <th>context_page_id</th>\n",
       "      <th>predict_category_property</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>len_property</th>\n",
       "      <th>len_pred_cat</th>\n",
       "      <th>shop_review_num_level</th>\n",
       "      <th>property_label</th>\n",
       "      <th>shop_review_positive_rate</th>\n",
       "      <th>shop_star_level</th>\n",
       "      <th>shop_score_service</th>\n",
       "      <th>shop_score_delivery</th>\n",
       "      <th>shop_score_description</th>\n",
       "      <th>is_trade</th>\n",
       "      <th>time</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>user_query_day</th>\n",
       "      <th>user_query_day_hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>108641074714126964</td>\n",
       "      <td>0</td>\n",
       "      <td>7908382889764677758;5799347067982556520</td>\n",
       "      <td>2072967855524022579;5131280576272319091;263639...</td>\n",
       "      <td>225</td>\n",
       "      <td>33</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>4505772604969228686</td>\n",
       "      <td>1</td>\n",
       "      <td>1003</td>\n",
       "      <td>2005</td>\n",
       "      <td>3003</td>\n",
       "      <td>282924576738839389</td>\n",
       "      <td>1537236544</td>\n",
       "      <td>4006</td>\n",
       "      <td>5799347067982556520:-1;509660095530134768:-1;5...</td>\n",
       "      <td>6765930309048922341</td>\n",
       "      <td>22</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1.0</td>\n",
       "      <td>5002</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>2018-09-17 22:09:04</td>\n",
       "      <td>17</td>\n",
       "      <td>22</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          instance_id  item_id                       item_category_list  \\\n",
       "0  108641074714126964        0  7908382889764677758;5799347067982556520   \n",
       "\n",
       "                                  item_property_list  item_brand_id  \\\n",
       "0  2072967855524022579;5131280576272319091;263639...            225   \n",
       "\n",
       "   item_city_id  item_price_level  item_sales_level  item_collected_level  \\\n",
       "0            33                 3                 3                     2   \n",
       "\n",
       "   item_pv_level              user_id  user_gender_id  user_age_level  \\\n",
       "0             14  4505772604969228686               1            1003   \n",
       "\n",
       "   user_occupation_id  user_star_level          context_id  context_timestamp  \\\n",
       "0                2005             3003  282924576738839389         1537236544   \n",
       "\n",
       "   context_page_id                          predict_category_property  \\\n",
       "0             4006  5799347067982556520:-1;509660095530134768:-1;5...   \n",
       "\n",
       "               shop_id  len_property  len_pred_cat  shop_review_num_level  \\\n",
       "0  6765930309048922341            22             5                      4   \n",
       "\n",
       "   property_label  shop_review_positive_rate  shop_star_level  \\\n",
       "0               4                        1.0             5002   \n",
       "\n",
       "   shop_score_service  shop_score_delivery  shop_score_description  is_trade  \\\n",
       "0                 1.0                  1.0                     1.0         0   \n",
       "\n",
       "                  time  day  hour  user_query_day  user_query_day_hour  \n",
       "0  2018-09-17 22:09:04   17    22               3                    3  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#########################   item_property_list进行长度分析     #############################################\n",
    "#看每一行长度,越长表明本行越长，商品信息越丰富\n",
    "# df = ads['item_property_list'].str.split(';',expand=True)    #---  takes too long to run\n",
    "# df.columns = [\"property_\"+str (i) for i in range(len(df.columns))]\n",
    "# ads.insert(20, 'len_property', df.count(axis=1) )\n",
    "\n",
    "ads['test_len'] = ads['item_property_list'].str.split(';',expand=False).apply( lambda x: len(x))\n",
    "ads.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "################################      label   item_category_list     ###################################\n",
    "#函数用来分解item_category_list\n",
    "def split_fst(str1= None):\n",
    "    \"\"\"\n",
    "    this is to split the combined attributes\n",
    "    \"\"\"\n",
    "    if ';' not in str1:\n",
    "        return str1\n",
    "    else:\n",
    "        pos = str1.index(';')\n",
    "        return str1[:pos]\n",
    "\n",
    "\n",
    "def split_snd(str1 = None):\n",
    "    \"\"\"\n",
    "    this is to split the combined attributes\n",
    "    \"\"\"\n",
    "    if ';' not in str1:\n",
    "        return str1\n",
    "    else:\n",
    "        pos = str1.index(';')\n",
    "        return str1[pos+1:]\n",
    "\n",
    "\n",
    "ads['item_category_list'] = ads['item_category_list'].apply(split_snd)\n",
    "ads['item_category_list'] = ads['item_category_list'].apply(split_snd)\n",
    "ads['item_category_list'] = ads['item_category_list'].apply(lambda x: int(x))\n",
    "ads['item_category_list'].unique() \n",
    "\n",
    "\n",
    "\n",
    "#对category进行label encoder\n",
    "le = LabelEncoder()\n",
    "le.fit(ads['item_category_list'].unique())\n",
    "ads['item_category_list'] = le.transform(ads['item_category_list'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 下面开始建模"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>is_trade</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   is_trade\n",
       "0         0\n",
       "1         0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = ads[['item_brand_id', 'item_city_id', 'item_price_level', 'item_sales_level',\n",
    "       'item_collected_level', 'item_pv_level', 'user_gender_id',\n",
    "       'user_age_level', 'user_occupation_id', 'user_star_level',\n",
    "        'context_page_id',\n",
    "       'shop_id', 'shop_review_num_level', 'shop_review_positive_rate',\n",
    "       'property_label','len_property',  'shop_star_level', 'shop_score_service',\n",
    "       'shop_score_delivery', 'shop_score_description',\n",
    "        'hour', 'user_query_day', 'user_query_day_hour','len_pred_cat']]\n",
    "Y = ads[['is_trade']]\n",
    "Y.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "seed = 7\n",
    "test_size = 0.25\n",
    "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size, random_state=seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "##################################     #模型调参主要地方           #####################################\n",
    "# 黄金搭档：\n",
    "# learning_rate = 0.05  0.1\n",
    "# max_depth = 6  7\n",
    "# n_estimators = 500  500\n",
    "\n",
    "def xgb_model(train_data, train_label, test_data, test_label):\n",
    "    clf = XGBClassifier(max_depth=6,\n",
    "                           min_child_weight=1,\n",
    "                           learning_rate=0.02,\n",
    "                           n_estimators=500,\n",
    "                           silent=True,\n",
    "                           objective='binary:logistic',\n",
    "                           gamma=0,\n",
    "                           max_delta_step=0,\n",
    "                           subsample=1,\n",
    "                           colsample_bytree=1,\n",
    "                           colsample_bylevel=1,\n",
    "                           reg_alpha=0,\n",
    "                           reg_lambda=0,\n",
    "                           scale_pos_weight=1,\n",
    "                           seed=1,\n",
    "                           missing=None)\n",
    "    \n",
    "    clf.fit(train_data, train_label, eval_metric='logloss', verbose=True,\n",
    "            eval_set=[(test_data, test_label)], early_stopping_rounds=100)\n",
    "#     Y_pre = clf.predict(test_data)\n",
    "    Y_pro = clf.predict_proba(test_data)[:, 1]\n",
    "\n",
    "    return clf\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\tvalidation_0-logloss:0.674793\n",
      "Will train until validation_0-logloss hasn't improved in 100 rounds.\n",
      "[1]\tvalidation_0-logloss:0.657159\n",
      "[2]\tvalidation_0-logloss:0.640205\n",
      "[3]\tvalidation_0-logloss:0.623893\n",
      "[4]\tvalidation_0-logloss:0.608187\n",
      "[5]\tvalidation_0-logloss:0.593057\n",
      "[6]\tvalidation_0-logloss:0.578473\n",
      "[7]\tvalidation_0-logloss:0.564409\n",
      "[8]\tvalidation_0-logloss:0.550837\n",
      "[9]\tvalidation_0-logloss:0.537735\n",
      "[10]\tvalidation_0-logloss:0.52508\n",
      "[11]\tvalidation_0-logloss:0.512853\n",
      "[12]\tvalidation_0-logloss:0.501032\n",
      "[13]\tvalidation_0-logloss:0.4896\n",
      "[14]\tvalidation_0-logloss:0.478541\n",
      "[15]\tvalidation_0-logloss:0.467836\n",
      "[16]\tvalidation_0-logloss:0.457473\n",
      "[17]\tvalidation_0-logloss:0.447436\n",
      "[18]\tvalidation_0-logloss:0.437712\n",
      "[19]\tvalidation_0-logloss:0.428289\n",
      "[20]\tvalidation_0-logloss:0.419154\n",
      "[21]\tvalidation_0-logloss:0.410297\n",
      "[22]\tvalidation_0-logloss:0.401706\n",
      "[23]\tvalidation_0-logloss:0.393373\n",
      "[24]\tvalidation_0-logloss:0.385285\n",
      "[25]\tvalidation_0-logloss:0.377436\n",
      "[26]\tvalidation_0-logloss:0.369816\n",
      "[27]\tvalidation_0-logloss:0.362417\n",
      "[28]\tvalidation_0-logloss:0.35523\n",
      "[29]\tvalidation_0-logloss:0.348248\n",
      "[30]\tvalidation_0-logloss:0.341464\n",
      "[31]\tvalidation_0-logloss:0.334873\n",
      "[32]\tvalidation_0-logloss:0.328465\n",
      "[33]\tvalidation_0-logloss:0.322236\n",
      "[34]\tvalidation_0-logloss:0.316181\n",
      "[35]\tvalidation_0-logloss:0.310292\n",
      "[36]\tvalidation_0-logloss:0.304565\n",
      "[37]\tvalidation_0-logloss:0.298993\n",
      "[38]\tvalidation_0-logloss:0.293573\n",
      "[39]\tvalidation_0-logloss:0.288299\n",
      "[40]\tvalidation_0-logloss:0.283168\n",
      "[41]\tvalidation_0-logloss:0.278174\n",
      "[42]\tvalidation_0-logloss:0.273313\n",
      "[43]\tvalidation_0-logloss:0.26858\n",
      "[44]\tvalidation_0-logloss:0.263974\n",
      "[45]\tvalidation_0-logloss:0.259489\n",
      "[46]\tvalidation_0-logloss:0.255122\n",
      "[47]\tvalidation_0-logloss:0.250868\n",
      "[48]\tvalidation_0-logloss:0.246727\n",
      "[49]\tvalidation_0-logloss:0.242693\n",
      "[50]\tvalidation_0-logloss:0.238763\n",
      "[51]\tvalidation_0-logloss:0.234935\n",
      "[52]\tvalidation_0-logloss:0.231204\n",
      "[53]\tvalidation_0-logloss:0.227571\n",
      "[54]\tvalidation_0-logloss:0.224031\n",
      "[55]\tvalidation_0-logloss:0.22058\n",
      "[56]\tvalidation_0-logloss:0.217218\n",
      "[57]\tvalidation_0-logloss:0.213941\n",
      "[58]\tvalidation_0-logloss:0.210749\n",
      "[59]\tvalidation_0-logloss:0.207638\n",
      "[60]\tvalidation_0-logloss:0.204605\n",
      "[61]\tvalidation_0-logloss:0.201649\n",
      "[62]\tvalidation_0-logloss:0.198766\n",
      "[63]\tvalidation_0-logloss:0.195957\n",
      "[64]\tvalidation_0-logloss:0.193219\n",
      "[65]\tvalidation_0-logloss:0.190548\n",
      "[66]\tvalidation_0-logloss:0.187946\n",
      "[67]\tvalidation_0-logloss:0.185408\n",
      "[68]\tvalidation_0-logloss:0.182934\n",
      "[69]\tvalidation_0-logloss:0.180521\n",
      "[70]\tvalidation_0-logloss:0.178168\n",
      "[71]\tvalidation_0-logloss:0.175874\n",
      "[72]\tvalidation_0-logloss:0.173637\n",
      "[73]\tvalidation_0-logloss:0.171455\n",
      "[74]\tvalidation_0-logloss:0.169327\n",
      "[75]\tvalidation_0-logloss:0.167253\n",
      "[76]\tvalidation_0-logloss:0.165231\n",
      "[77]\tvalidation_0-logloss:0.163258\n",
      "[78]\tvalidation_0-logloss:0.161336\n",
      "[79]\tvalidation_0-logloss:0.15946\n",
      "[80]\tvalidation_0-logloss:0.157631\n",
      "[81]\tvalidation_0-logloss:0.155848\n",
      "[82]\tvalidation_0-logloss:0.154108\n",
      "[83]\tvalidation_0-logloss:0.15241\n",
      "[84]\tvalidation_0-logloss:0.150757\n",
      "[85]\tvalidation_0-logloss:0.149144\n",
      "[86]\tvalidation_0-logloss:0.147572\n",
      "[87]\tvalidation_0-logloss:0.146037\n",
      "[88]\tvalidation_0-logloss:0.144542\n",
      "[89]\tvalidation_0-logloss:0.143082\n",
      "[90]\tvalidation_0-logloss:0.141658\n",
      "[91]\tvalidation_0-logloss:0.140271\n",
      "[92]\tvalidation_0-logloss:0.138918\n",
      "[93]\tvalidation_0-logloss:0.137598\n",
      "[94]\tvalidation_0-logloss:0.136312\n",
      "[95]\tvalidation_0-logloss:0.135057\n",
      "[96]\tvalidation_0-logloss:0.133833\n",
      "[97]\tvalidation_0-logloss:0.132641\n",
      "[98]\tvalidation_0-logloss:0.131478\n",
      "[99]\tvalidation_0-logloss:0.130344\n",
      "[100]\tvalidation_0-logloss:0.129239\n",
      "[101]\tvalidation_0-logloss:0.12816\n",
      "[102]\tvalidation_0-logloss:0.127108\n",
      "[103]\tvalidation_0-logloss:0.126083\n",
      "[104]\tvalidation_0-logloss:0.125083\n",
      "[105]\tvalidation_0-logloss:0.124107\n",
      "[106]\tvalidation_0-logloss:0.123158\n",
      "[107]\tvalidation_0-logloss:0.122231\n",
      "[108]\tvalidation_0-logloss:0.121328\n",
      "[109]\tvalidation_0-logloss:0.120448\n",
      "[110]\tvalidation_0-logloss:0.119589\n",
      "[111]\tvalidation_0-logloss:0.118752\n",
      "[112]\tvalidation_0-logloss:0.117936\n",
      "[113]\tvalidation_0-logloss:0.117144\n",
      "[114]\tvalidation_0-logloss:0.116368\n",
      "[115]\tvalidation_0-logloss:0.115614\n",
      "[116]\tvalidation_0-logloss:0.114879\n",
      "[117]\tvalidation_0-logloss:0.114161\n",
      "[118]\tvalidation_0-logloss:0.113462\n",
      "[119]\tvalidation_0-logloss:0.112783\n",
      "[120]\tvalidation_0-logloss:0.11212\n",
      "[121]\tvalidation_0-logloss:0.111473\n",
      "[122]\tvalidation_0-logloss:0.110843\n",
      "[123]\tvalidation_0-logloss:0.110228\n",
      "[124]\tvalidation_0-logloss:0.10963\n",
      "[125]\tvalidation_0-logloss:0.109046\n",
      "[126]\tvalidation_0-logloss:0.108481\n",
      "[127]\tvalidation_0-logloss:0.107929\n",
      "[128]\tvalidation_0-logloss:0.10739\n",
      "[129]\tvalidation_0-logloss:0.106867\n",
      "[130]\tvalidation_0-logloss:0.106356\n",
      "[131]\tvalidation_0-logloss:0.105858\n",
      "[132]\tvalidation_0-logloss:0.105374\n",
      "[133]\tvalidation_0-logloss:0.104901\n",
      "[134]\tvalidation_0-logloss:0.104442\n",
      "[135]\tvalidation_0-logloss:0.103994\n",
      "[136]\tvalidation_0-logloss:0.103559\n",
      "[137]\tvalidation_0-logloss:0.103133\n",
      "[138]\tvalidation_0-logloss:0.102717\n",
      "[139]\tvalidation_0-logloss:0.102317\n",
      "[140]\tvalidation_0-logloss:0.101926\n",
      "[141]\tvalidation_0-logloss:0.101544\n",
      "[142]\tvalidation_0-logloss:0.101172\n",
      "[143]\tvalidation_0-logloss:0.100808\n",
      "[144]\tvalidation_0-logloss:0.100455\n",
      "[145]\tvalidation_0-logloss:0.100113\n",
      "[146]\tvalidation_0-logloss:0.099778\n",
      "[147]\tvalidation_0-logloss:0.099454\n",
      "[148]\tvalidation_0-logloss:0.099139\n",
      "[149]\tvalidation_0-logloss:0.098831\n",
      "[150]\tvalidation_0-logloss:0.098531\n",
      "[151]\tvalidation_0-logloss:0.098241\n",
      "[152]\tvalidation_0-logloss:0.097958\n",
      "[153]\tvalidation_0-logloss:0.097681\n",
      "[154]\tvalidation_0-logloss:0.097413\n",
      "[155]\tvalidation_0-logloss:0.097152\n",
      "[156]\tvalidation_0-logloss:0.096897\n",
      "[157]\tvalidation_0-logloss:0.096651\n",
      "[158]\tvalidation_0-logloss:0.096411\n",
      "[159]\tvalidation_0-logloss:0.096178\n",
      "[160]\tvalidation_0-logloss:0.09595\n",
      "[161]\tvalidation_0-logloss:0.095728\n",
      "[162]\tvalidation_0-logloss:0.095514\n",
      "[163]\tvalidation_0-logloss:0.095302\n",
      "[164]\tvalidation_0-logloss:0.095099\n",
      "[165]\tvalidation_0-logloss:0.094901\n",
      "[166]\tvalidation_0-logloss:0.094708\n",
      "[167]\tvalidation_0-logloss:0.09452\n",
      "[168]\tvalidation_0-logloss:0.094339\n",
      "[169]\tvalidation_0-logloss:0.094162\n",
      "[170]\tvalidation_0-logloss:0.093992\n",
      "[171]\tvalidation_0-logloss:0.093825\n",
      "[172]\tvalidation_0-logloss:0.093662\n",
      "[173]\tvalidation_0-logloss:0.093503\n",
      "[174]\tvalidation_0-logloss:0.093348\n",
      "[175]\tvalidation_0-logloss:0.093201\n",
      "[176]\tvalidation_0-logloss:0.093055\n",
      "[177]\tvalidation_0-logloss:0.092913\n",
      "[178]\tvalidation_0-logloss:0.092776\n",
      "[179]\tvalidation_0-logloss:0.092641\n",
      "[180]\tvalidation_0-logloss:0.092511\n",
      "[181]\tvalidation_0-logloss:0.092386\n",
      "[182]\tvalidation_0-logloss:0.092267\n",
      "[183]\tvalidation_0-logloss:0.092146\n",
      "[184]\tvalidation_0-logloss:0.092032\n",
      "[185]\tvalidation_0-logloss:0.091919\n",
      "[186]\tvalidation_0-logloss:0.091811\n",
      "[187]\tvalidation_0-logloss:0.091706\n",
      "[188]\tvalidation_0-logloss:0.091602\n",
      "[189]\tvalidation_0-logloss:0.091503\n",
      "[190]\tvalidation_0-logloss:0.091408\n",
      "[191]\tvalidation_0-logloss:0.091315\n",
      "[192]\tvalidation_0-logloss:0.091225\n",
      "[193]\tvalidation_0-logloss:0.091138\n",
      "[194]\tvalidation_0-logloss:0.091053\n",
      "[195]\tvalidation_0-logloss:0.090967\n",
      "[196]\tvalidation_0-logloss:0.09088\n",
      "[197]\tvalidation_0-logloss:0.0908\n",
      "[198]\tvalidation_0-logloss:0.090719\n",
      "[199]\tvalidation_0-logloss:0.090645\n",
      "[200]\tvalidation_0-logloss:0.09057\n",
      "[201]\tvalidation_0-logloss:0.090499\n",
      "[202]\tvalidation_0-logloss:0.09043\n",
      "[203]\tvalidation_0-logloss:0.090364\n",
      "[204]\tvalidation_0-logloss:0.090297\n",
      "[205]\tvalidation_0-logloss:0.090234\n",
      "[206]\tvalidation_0-logloss:0.090171\n",
      "[207]\tvalidation_0-logloss:0.090111\n",
      "[208]\tvalidation_0-logloss:0.090053\n",
      "[209]\tvalidation_0-logloss:0.089996\n",
      "[210]\tvalidation_0-logloss:0.089938\n",
      "[211]\tvalidation_0-logloss:0.089879\n",
      "[212]\tvalidation_0-logloss:0.089825\n",
      "[213]\tvalidation_0-logloss:0.089774\n",
      "[214]\tvalidation_0-logloss:0.08972\n",
      "[215]\tvalidation_0-logloss:0.089668\n",
      "[216]\tvalidation_0-logloss:0.089619\n",
      "[217]\tvalidation_0-logloss:0.089565\n",
      "[218]\tvalidation_0-logloss:0.089521\n",
      "[219]\tvalidation_0-logloss:0.089478\n",
      "[220]\tvalidation_0-logloss:0.089428\n",
      "[221]\tvalidation_0-logloss:0.089391\n",
      "[222]\tvalidation_0-logloss:0.089343\n",
      "[223]\tvalidation_0-logloss:0.0893\n",
      "[224]\tvalidation_0-logloss:0.089266\n",
      "[225]\tvalidation_0-logloss:0.089225\n",
      "[226]\tvalidation_0-logloss:0.089184\n",
      "[227]\tvalidation_0-logloss:0.089152\n",
      "[228]\tvalidation_0-logloss:0.089114\n",
      "[229]\tvalidation_0-logloss:0.08908\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[230]\tvalidation_0-logloss:0.089042\n",
      "[231]\tvalidation_0-logloss:0.089014\n",
      "[232]\tvalidation_0-logloss:0.088982\n",
      "[233]\tvalidation_0-logloss:0.088951\n",
      "[234]\tvalidation_0-logloss:0.088921\n",
      "[235]\tvalidation_0-logloss:0.088891\n",
      "[236]\tvalidation_0-logloss:0.088862\n",
      "[237]\tvalidation_0-logloss:0.088834\n",
      "[238]\tvalidation_0-logloss:0.08881\n",
      "[239]\tvalidation_0-logloss:0.088783\n",
      "[240]\tvalidation_0-logloss:0.088756\n",
      "[241]\tvalidation_0-logloss:0.088728\n",
      "[242]\tvalidation_0-logloss:0.088703\n",
      "[243]\tvalidation_0-logloss:0.08868\n",
      "[244]\tvalidation_0-logloss:0.088657\n",
      "[245]\tvalidation_0-logloss:0.088636\n",
      "[246]\tvalidation_0-logloss:0.088612\n",
      "[247]\tvalidation_0-logloss:0.08859\n",
      "[248]\tvalidation_0-logloss:0.088568\n",
      "[249]\tvalidation_0-logloss:0.088551\n",
      "[250]\tvalidation_0-logloss:0.088532\n",
      "[251]\tvalidation_0-logloss:0.088513\n",
      "[252]\tvalidation_0-logloss:0.088493\n",
      "[253]\tvalidation_0-logloss:0.088475\n",
      "[254]\tvalidation_0-logloss:0.088457\n",
      "[255]\tvalidation_0-logloss:0.088439\n",
      "[256]\tvalidation_0-logloss:0.088424\n",
      "[257]\tvalidation_0-logloss:0.088405\n",
      "[258]\tvalidation_0-logloss:0.088392\n",
      "[259]\tvalidation_0-logloss:0.088377\n",
      "[260]\tvalidation_0-logloss:0.088362\n",
      "[261]\tvalidation_0-logloss:0.088346\n",
      "[262]\tvalidation_0-logloss:0.088332\n",
      "[263]\tvalidation_0-logloss:0.088314\n",
      "[264]\tvalidation_0-logloss:0.088298\n",
      "[265]\tvalidation_0-logloss:0.088285\n",
      "[266]\tvalidation_0-logloss:0.088273\n",
      "[267]\tvalidation_0-logloss:0.088259\n",
      "[268]\tvalidation_0-logloss:0.08825\n",
      "[269]\tvalidation_0-logloss:0.088239\n",
      "[270]\tvalidation_0-logloss:0.088222\n",
      "[271]\tvalidation_0-logloss:0.088207\n",
      "[272]\tvalidation_0-logloss:0.088193\n",
      "[273]\tvalidation_0-logloss:0.088182\n",
      "[274]\tvalidation_0-logloss:0.08817\n",
      "[275]\tvalidation_0-logloss:0.088159\n",
      "[276]\tvalidation_0-logloss:0.088145\n",
      "[277]\tvalidation_0-logloss:0.088132\n",
      "[278]\tvalidation_0-logloss:0.088123\n",
      "[279]\tvalidation_0-logloss:0.088113\n",
      "[280]\tvalidation_0-logloss:0.088099\n",
      "[281]\tvalidation_0-logloss:0.088085\n",
      "[282]\tvalidation_0-logloss:0.088072\n",
      "[283]\tvalidation_0-logloss:0.088064\n",
      "[284]\tvalidation_0-logloss:0.088056\n",
      "[285]\tvalidation_0-logloss:0.088046\n",
      "[286]\tvalidation_0-logloss:0.088038\n",
      "[287]\tvalidation_0-logloss:0.088032\n",
      "[288]\tvalidation_0-logloss:0.088023\n",
      "[289]\tvalidation_0-logloss:0.088016\n",
      "[290]\tvalidation_0-logloss:0.088007\n",
      "[291]\tvalidation_0-logloss:0.088001\n",
      "[292]\tvalidation_0-logloss:0.087997\n",
      "[293]\tvalidation_0-logloss:0.08799\n",
      "[294]\tvalidation_0-logloss:0.087985\n",
      "[295]\tvalidation_0-logloss:0.087979\n",
      "[296]\tvalidation_0-logloss:0.087973\n",
      "[297]\tvalidation_0-logloss:0.087964\n",
      "[298]\tvalidation_0-logloss:0.087957\n",
      "[299]\tvalidation_0-logloss:0.087951\n",
      "[300]\tvalidation_0-logloss:0.087947\n",
      "[301]\tvalidation_0-logloss:0.087936\n",
      "[302]\tvalidation_0-logloss:0.087928\n",
      "[303]\tvalidation_0-logloss:0.087921\n",
      "[304]\tvalidation_0-logloss:0.087919\n",
      "[305]\tvalidation_0-logloss:0.087913\n",
      "[306]\tvalidation_0-logloss:0.087907\n",
      "[307]\tvalidation_0-logloss:0.087903\n",
      "[308]\tvalidation_0-logloss:0.087898\n",
      "[309]\tvalidation_0-logloss:0.087893\n",
      "[310]\tvalidation_0-logloss:0.087886\n",
      "[311]\tvalidation_0-logloss:0.087884\n",
      "[312]\tvalidation_0-logloss:0.087877\n",
      "[313]\tvalidation_0-logloss:0.087872\n",
      "[314]\tvalidation_0-logloss:0.087869\n",
      "[315]\tvalidation_0-logloss:0.087862\n",
      "[316]\tvalidation_0-logloss:0.087855\n",
      "[317]\tvalidation_0-logloss:0.087849\n",
      "[318]\tvalidation_0-logloss:0.087845\n",
      "[319]\tvalidation_0-logloss:0.08784\n",
      "[320]\tvalidation_0-logloss:0.087835\n",
      "[321]\tvalidation_0-logloss:0.087829\n",
      "[322]\tvalidation_0-logloss:0.087828\n",
      "[323]\tvalidation_0-logloss:0.087824\n",
      "[324]\tvalidation_0-logloss:0.087817\n",
      "[325]\tvalidation_0-logloss:0.087815\n",
      "[326]\tvalidation_0-logloss:0.087814\n",
      "[327]\tvalidation_0-logloss:0.087813\n",
      "[328]\tvalidation_0-logloss:0.08781\n",
      "[329]\tvalidation_0-logloss:0.087806\n",
      "[330]\tvalidation_0-logloss:0.087806\n",
      "[331]\tvalidation_0-logloss:0.087801\n",
      "[332]\tvalidation_0-logloss:0.087796\n",
      "[333]\tvalidation_0-logloss:0.087794\n",
      "[334]\tvalidation_0-logloss:0.087792\n",
      "[335]\tvalidation_0-logloss:0.08779\n",
      "[336]\tvalidation_0-logloss:0.087788\n",
      "[337]\tvalidation_0-logloss:0.087786\n",
      "[338]\tvalidation_0-logloss:0.087782\n",
      "[339]\tvalidation_0-logloss:0.087775\n",
      "[340]\tvalidation_0-logloss:0.087773\n",
      "[341]\tvalidation_0-logloss:0.087772\n",
      "[342]\tvalidation_0-logloss:0.08777\n",
      "[343]\tvalidation_0-logloss:0.087767\n",
      "[344]\tvalidation_0-logloss:0.087766\n",
      "[345]\tvalidation_0-logloss:0.08776\n",
      "[346]\tvalidation_0-logloss:0.087759\n",
      "[347]\tvalidation_0-logloss:0.087754\n",
      "[348]\tvalidation_0-logloss:0.087748\n",
      "[349]\tvalidation_0-logloss:0.087747\n",
      "[350]\tvalidation_0-logloss:0.087743\n",
      "[351]\tvalidation_0-logloss:0.08774\n",
      "[352]\tvalidation_0-logloss:0.087735\n",
      "[353]\tvalidation_0-logloss:0.087733\n",
      "[354]\tvalidation_0-logloss:0.087732\n",
      "[355]\tvalidation_0-logloss:0.087729\n",
      "[356]\tvalidation_0-logloss:0.087725\n",
      "[357]\tvalidation_0-logloss:0.08772\n",
      "[358]\tvalidation_0-logloss:0.08772\n",
      "[359]\tvalidation_0-logloss:0.087719\n",
      "[360]\tvalidation_0-logloss:0.087713\n",
      "[361]\tvalidation_0-logloss:0.087709\n",
      "[362]\tvalidation_0-logloss:0.087704\n",
      "[363]\tvalidation_0-logloss:0.087701\n",
      "[364]\tvalidation_0-logloss:0.0877\n",
      "[365]\tvalidation_0-logloss:0.087699\n",
      "[366]\tvalidation_0-logloss:0.087696\n",
      "[367]\tvalidation_0-logloss:0.08769\n",
      "[368]\tvalidation_0-logloss:0.087688\n",
      "[369]\tvalidation_0-logloss:0.087687\n",
      "[370]\tvalidation_0-logloss:0.087685\n",
      "[371]\tvalidation_0-logloss:0.087685\n",
      "[372]\tvalidation_0-logloss:0.087684\n",
      "[373]\tvalidation_0-logloss:0.087682\n",
      "[374]\tvalidation_0-logloss:0.087683\n",
      "[375]\tvalidation_0-logloss:0.08768\n",
      "[376]\tvalidation_0-logloss:0.087676\n",
      "[377]\tvalidation_0-logloss:0.087674\n",
      "[378]\tvalidation_0-logloss:0.087671\n",
      "[379]\tvalidation_0-logloss:0.087671\n",
      "[380]\tvalidation_0-logloss:0.087669\n",
      "[381]\tvalidation_0-logloss:0.087667\n",
      "[382]\tvalidation_0-logloss:0.087665\n",
      "[383]\tvalidation_0-logloss:0.087665\n",
      "[384]\tvalidation_0-logloss:0.087662\n",
      "[385]\tvalidation_0-logloss:0.087662\n",
      "[386]\tvalidation_0-logloss:0.087662\n",
      "[387]\tvalidation_0-logloss:0.08766\n",
      "[388]\tvalidation_0-logloss:0.087661\n",
      "[389]\tvalidation_0-logloss:0.087663\n",
      "[390]\tvalidation_0-logloss:0.087659\n",
      "[391]\tvalidation_0-logloss:0.087659\n",
      "[392]\tvalidation_0-logloss:0.087658\n",
      "[393]\tvalidation_0-logloss:0.087655\n",
      "[394]\tvalidation_0-logloss:0.087655\n",
      "[395]\tvalidation_0-logloss:0.087655\n",
      "[396]\tvalidation_0-logloss:0.087654\n",
      "[397]\tvalidation_0-logloss:0.087654\n",
      "[398]\tvalidation_0-logloss:0.087654\n",
      "[399]\tvalidation_0-logloss:0.087651\n",
      "[400]\tvalidation_0-logloss:0.08765\n",
      "[401]\tvalidation_0-logloss:0.087649\n",
      "[402]\tvalidation_0-logloss:0.08765\n",
      "[403]\tvalidation_0-logloss:0.087648\n",
      "[404]\tvalidation_0-logloss:0.087647\n",
      "[405]\tvalidation_0-logloss:0.087646\n",
      "[406]\tvalidation_0-logloss:0.087647\n",
      "[407]\tvalidation_0-logloss:0.087645\n",
      "[408]\tvalidation_0-logloss:0.087644\n",
      "[409]\tvalidation_0-logloss:0.087643\n",
      "[410]\tvalidation_0-logloss:0.087643\n",
      "[411]\tvalidation_0-logloss:0.087641\n",
      "[412]\tvalidation_0-logloss:0.087639\n",
      "[413]\tvalidation_0-logloss:0.087637\n",
      "[414]\tvalidation_0-logloss:0.087636\n",
      "[415]\tvalidation_0-logloss:0.087636\n",
      "[416]\tvalidation_0-logloss:0.087635\n",
      "[417]\tvalidation_0-logloss:0.087636\n",
      "[418]\tvalidation_0-logloss:0.087636\n",
      "[419]\tvalidation_0-logloss:0.087635\n",
      "[420]\tvalidation_0-logloss:0.087636\n",
      "[421]\tvalidation_0-logloss:0.087636\n",
      "[422]\tvalidation_0-logloss:0.087636\n",
      "[423]\tvalidation_0-logloss:0.087634\n",
      "[424]\tvalidation_0-logloss:0.087634\n",
      "[425]\tvalidation_0-logloss:0.087633\n",
      "[426]\tvalidation_0-logloss:0.087632\n",
      "[427]\tvalidation_0-logloss:0.087631\n",
      "[428]\tvalidation_0-logloss:0.087631\n",
      "[429]\tvalidation_0-logloss:0.087629\n",
      "[430]\tvalidation_0-logloss:0.087628\n",
      "[431]\tvalidation_0-logloss:0.087627\n",
      "[432]\tvalidation_0-logloss:0.087627\n",
      "[433]\tvalidation_0-logloss:0.087626\n",
      "[434]\tvalidation_0-logloss:0.087627\n",
      "[435]\tvalidation_0-logloss:0.087625\n",
      "[436]\tvalidation_0-logloss:0.087626\n",
      "[437]\tvalidation_0-logloss:0.087627\n",
      "[438]\tvalidation_0-logloss:0.087624\n",
      "[439]\tvalidation_0-logloss:0.087626\n",
      "[440]\tvalidation_0-logloss:0.087625\n",
      "[441]\tvalidation_0-logloss:0.087626\n",
      "[442]\tvalidation_0-logloss:0.087624\n",
      "[443]\tvalidation_0-logloss:0.087623\n",
      "[444]\tvalidation_0-logloss:0.087623\n",
      "[445]\tvalidation_0-logloss:0.087622\n",
      "[446]\tvalidation_0-logloss:0.087621\n",
      "[447]\tvalidation_0-logloss:0.087621\n",
      "[448]\tvalidation_0-logloss:0.087621\n",
      "[449]\tvalidation_0-logloss:0.087621\n",
      "[450]\tvalidation_0-logloss:0.08762\n",
      "[451]\tvalidation_0-logloss:0.08762\n",
      "[452]\tvalidation_0-logloss:0.087619\n",
      "[453]\tvalidation_0-logloss:0.087618\n",
      "[454]\tvalidation_0-logloss:0.087618\n",
      "[455]\tvalidation_0-logloss:0.087616\n",
      "[456]\tvalidation_0-logloss:0.087617\n",
      "[457]\tvalidation_0-logloss:0.087617\n",
      "[458]\tvalidation_0-logloss:0.087616\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[459]\tvalidation_0-logloss:0.087615\n",
      "[460]\tvalidation_0-logloss:0.087614\n",
      "[461]\tvalidation_0-logloss:0.087614\n",
      "[462]\tvalidation_0-logloss:0.087614\n",
      "[463]\tvalidation_0-logloss:0.087615\n",
      "[464]\tvalidation_0-logloss:0.087616\n",
      "[465]\tvalidation_0-logloss:0.087615\n",
      "[466]\tvalidation_0-logloss:0.087617\n",
      "[467]\tvalidation_0-logloss:0.087618\n",
      "[468]\tvalidation_0-logloss:0.087617\n",
      "[469]\tvalidation_0-logloss:0.087617\n",
      "[470]\tvalidation_0-logloss:0.087617\n",
      "[471]\tvalidation_0-logloss:0.087616\n",
      "[472]\tvalidation_0-logloss:0.087616\n",
      "[473]\tvalidation_0-logloss:0.087616\n",
      "[474]\tvalidation_0-logloss:0.087616\n",
      "[475]\tvalidation_0-logloss:0.087615\n",
      "[476]\tvalidation_0-logloss:0.087614\n",
      "[477]\tvalidation_0-logloss:0.087615\n",
      "[478]\tvalidation_0-logloss:0.087615\n",
      "[479]\tvalidation_0-logloss:0.087614\n",
      "[480]\tvalidation_0-logloss:0.087612\n",
      "[481]\tvalidation_0-logloss:0.087612\n",
      "[482]\tvalidation_0-logloss:0.087613\n",
      "[483]\tvalidation_0-logloss:0.087612\n",
      "[484]\tvalidation_0-logloss:0.087611\n",
      "[485]\tvalidation_0-logloss:0.087611\n",
      "[486]\tvalidation_0-logloss:0.08761\n",
      "[487]\tvalidation_0-logloss:0.08761\n",
      "[488]\tvalidation_0-logloss:0.08761\n",
      "[489]\tvalidation_0-logloss:0.087611\n",
      "[490]\tvalidation_0-logloss:0.08761\n",
      "[491]\tvalidation_0-logloss:0.087609\n",
      "[492]\tvalidation_0-logloss:0.087611\n",
      "[493]\tvalidation_0-logloss:0.087611\n",
      "[494]\tvalidation_0-logloss:0.087611\n",
      "[495]\tvalidation_0-logloss:0.087611\n",
      "[496]\tvalidation_0-logloss:0.08761\n",
      "[497]\tvalidation_0-logloss:0.08761\n",
      "[498]\tvalidation_0-logloss:0.08761\n",
      "[499]\tvalidation_0-logloss:0.087608\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model_all = xgb_model(X_train,Y_train, X_test,  Y_test)\n",
    "\n",
    "plot_importance(model_all)   #feature重要程度\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lasso Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn import datasets\n",
    "from sklearn.linear_model import LassoCV\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.model_selection import GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "ads_test = ads.sample(frac=0.2)\n",
    "\n",
    "X_l = ads_test[['item_brand_id', 'item_city_id', 'item_price_level', 'item_sales_level',\n",
    "       'item_collected_level', 'item_pv_level', 'user_gender_id',\n",
    "       'user_age_level', 'user_occupation_id', 'user_star_level',\n",
    "        'context_page_id',\n",
    "       'shop_id', 'shop_review_num_level', 'shop_review_positive_rate',\n",
    "       'property_label','len_property',  'shop_star_level', 'shop_score_service',\n",
    "       'shop_score_delivery', 'shop_score_description',\n",
    "        'hour', 'user_query_day', 'user_query_day_hour','len_pred_cat']]\n",
    "Y_l = ads_test[['is_trade']]\n",
    "\n",
    "seed = 7\n",
    "test_size = 0.25\n",
    "X_train1, X_test1, Y_train1, Y_test1 = train_test_split(X_l, Y_l, test_size=test_size, random_state=seed)\n",
    "\n",
    "\n",
    "\n",
    "lasso = Lasso(random_state=0)\n",
    "alphas = np.logspace(-4, -0.5, 30)\n",
    "\n",
    "tuned_parameters = [{'alpha': alphas}]\n",
    "n_folds = 3\n",
    "\n",
    "clf = GridSearchCV(lasso, tuned_parameters, cv=n_folds, refit=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3, error_score='raise',\n",
       "       estimator=Lasso(alpha=1.0, copy_X=True, fit_intercept=True, max_iter=1000,\n",
       "   normalize=False, positive=False, precompute=False, random_state=0,\n",
       "   selection='cyclic', tol=0.0001, warm_start=False),\n",
       "       fit_params=None, iid=True, n_jobs=1,\n",
       "       param_grid=[{'alpha': array([1.00000e-04, 1.32035e-04, 1.74333e-04, 2.30181e-04, 3.03920e-04,\n",
       "       4.01281e-04, 5.29832e-04, 6.99564e-04, 9.23671e-04, 1.21957e-03,\n",
       "       1.61026e-03, 2.12611e-03, 2.80722e-03, 3.70651e-03, 4.89390e-03,\n",
       "       6.46167e-03, 8.53168e-03, 1.12648e-02, 1.48735e-02, 1.96383e-02,\n",
       "       2.59294e-02, 3.42360e-02, 4.52035e-02, 5.96846e-02, 7.88046e-02,\n",
       "       1.04050e-01, 1.37382e-01, 1.81393e-01, 2.39503e-01, 3.16228e-01])}],\n",
       "       pre_dispatch='2*n_jobs', refit=False, return_train_score='warn',\n",
       "       scoring=None, verbose=0)"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.fit(X_train1,Y_train1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x133c15550>]"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "scores = clf.cv_results_['mean_test_score']\n",
    "scores_std = clf.cv_results_['std_test_score']\n",
    "plt.figure().set_size_inches(8, 6)\n",
    "plt.semilogx(alphas, scores)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lasso model:  -0.004 * X2 + 0.001 * X3 + -0.001 * X22 + -0.0 * X21 + -0.0 * X12 + 0.0 * X20 + 0.0 * X7 + -0.0 * X10 + 0.0 * X15 + -0.0 * X1 + -0.0 * X0 + -0.0 * X11 + -0.0 * X4 + -0.0 * X5 + 0.0 * X6 + -0.0 * X8 + 0.0 * X9 + -0.0 * X13 + -0.0 * X14 + -0.0 * X16 + -0.0 * X17 + -0.0 * X18 + -0.0 * X19 + 0.0 * X23\n"
     ]
    }
   ],
   "source": [
    "def pretty_print_linear(coefs, names = None, sort = False):\n",
    "    if names == None:\n",
    "        names = [\"X%s\" % x for x in range(len(coefs))]\n",
    "    lst = zip(coefs, names)\n",
    "    if sort:\n",
    "        lst = sorted(lst,  key = lambda x:-np.abs(x[0]))\n",
    "    return \" + \".join(\"%s * %s\" % (round(coef, 3), name)\n",
    "                                   for coef, name in lst)\n",
    "\n",
    "\n",
    "seed = 7\n",
    "test_size = 0.25\n",
    "X_train1, X_test1, Y_train1, Y_test1 = train_test_split(X_l, Y_l, test_size=test_size, random_state=seed)\n",
    "\n",
    "lasso = Lasso(alpha=.003)\n",
    "\n",
    "lasso.fit(X_train1, Y_train1)\n",
    "  \n",
    "print (\"Lasso model: \", pretty_print_linear(lasso.coef_, names=None, sort = True))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0067532701610794055\n",
      "0.0064999544422497104\n",
      "0.00155327923589621\n",
      "3.604534355128308e-05\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature Name</th>\n",
       "      <th>Alpha = 0.000100</th>\n",
       "      <th>Alpha = 0.001000</th>\n",
       "      <th>Alpha = 0.010000</th>\n",
       "      <th>Alpha = 0.100000</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>item_brand_id</td>\n",
       "      <td>-2.891139e-06</td>\n",
       "      <td>-2.976878e-06</td>\n",
       "      <td>-2.060906e-06</td>\n",
       "      <td>-6.895974e-07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>item_city_id</td>\n",
       "      <td>-7.654495e-06</td>\n",
       "      <td>-2.081594e-05</td>\n",
       "      <td>-8.414619e-05</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>item_price_level</td>\n",
       "      <td>-5.510769e-03</td>\n",
       "      <td>-5.065257e-03</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>item_sales_level</td>\n",
       "      <td>3.819803e-03</td>\n",
       "      <td>2.708938e-03</td>\n",
       "      <td>2.972932e-04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>item_collected_level</td>\n",
       "      <td>-1.586354e-03</td>\n",
       "      <td>-7.694463e-04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>item_pv_level</td>\n",
       "      <td>-1.064011e-03</td>\n",
       "      <td>-4.659270e-04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>user_gender_id</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>user_age_level</td>\n",
       "      <td>2.097080e-03</td>\n",
       "      <td>1.549007e-03</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>user_occupation_id</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>user_star_level</td>\n",
       "      <td>4.368419e-04</td>\n",
       "      <td>2.097788e-04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>context_page_id</td>\n",
       "      <td>-2.921464e-04</td>\n",
       "      <td>-2.507383e-04</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>shop_id</td>\n",
       "      <td>-7.683390e-23</td>\n",
       "      <td>-1.298935e-22</td>\n",
       "      <td>-2.091307e-22</td>\n",
       "      <td>-2.534750e-22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>shop_review_num_level</td>\n",
       "      <td>-3.439915e-04</td>\n",
       "      <td>-6.736568e-04</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>shop_review_positive_rate</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>property_label</td>\n",
       "      <td>-1.574984e-06</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>len_property</td>\n",
       "      <td>8.882562e-05</td>\n",
       "      <td>9.318157e-05</td>\n",
       "      <td>1.819463e-04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>shop_star_level</td>\n",
       "      <td>-5.689701e-04</td>\n",
       "      <td>-5.765250e-05</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>shop_score_service</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>shop_score_delivery</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>shop_score_description</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>hour</td>\n",
       "      <td>3.408278e-04</td>\n",
       "      <td>3.259836e-04</td>\n",
       "      <td>1.351130e-04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>user_query_day</td>\n",
       "      <td>-2.997440e-04</td>\n",
       "      <td>-3.483643e-04</td>\n",
       "      <td>-2.018362e-04</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>user_query_day_hour</td>\n",
       "      <td>-1.146085e-03</td>\n",
       "      <td>-9.711520e-04</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "      <td>-0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>len_pred_cat</td>\n",
       "      <td>8.113382e-05</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Feature Name  Alpha = 0.000100  Alpha = 0.001000  \\\n",
       "0               item_brand_id     -2.891139e-06     -2.976878e-06   \n",
       "1                item_city_id     -7.654495e-06     -2.081594e-05   \n",
       "2            item_price_level     -5.510769e-03     -5.065257e-03   \n",
       "3            item_sales_level      3.819803e-03      2.708938e-03   \n",
       "4        item_collected_level     -1.586354e-03     -7.694463e-04   \n",
       "5               item_pv_level     -1.064011e-03     -4.659270e-04   \n",
       "6              user_gender_id     -0.000000e+00     -0.000000e+00   \n",
       "7              user_age_level      2.097080e-03      1.549007e-03   \n",
       "8          user_occupation_id      0.000000e+00     -0.000000e+00   \n",
       "9             user_star_level      4.368419e-04      2.097788e-04   \n",
       "10            context_page_id     -2.921464e-04     -2.507383e-04   \n",
       "11                    shop_id     -7.683390e-23     -1.298935e-22   \n",
       "12      shop_review_num_level     -3.439915e-04     -6.736568e-04   \n",
       "13  shop_review_positive_rate     -0.000000e+00     -0.000000e+00   \n",
       "14             property_label     -1.574984e-06     -0.000000e+00   \n",
       "15               len_property      8.882562e-05      9.318157e-05   \n",
       "16            shop_star_level     -5.689701e-04     -5.765250e-05   \n",
       "17         shop_score_service     -0.000000e+00     -0.000000e+00   \n",
       "18        shop_score_delivery     -0.000000e+00     -0.000000e+00   \n",
       "19     shop_score_description     -0.000000e+00     -0.000000e+00   \n",
       "20                       hour      3.408278e-04      3.259836e-04   \n",
       "21             user_query_day     -2.997440e-04     -3.483643e-04   \n",
       "22        user_query_day_hour     -1.146085e-03     -9.711520e-04   \n",
       "23               len_pred_cat      8.113382e-05      0.000000e+00   \n",
       "\n",
       "    Alpha = 0.010000  Alpha = 0.100000  \n",
       "0      -2.060906e-06     -6.895974e-07  \n",
       "1      -8.414619e-05     -0.000000e+00  \n",
       "2      -0.000000e+00     -0.000000e+00  \n",
       "3       2.972932e-04      0.000000e+00  \n",
       "4       0.000000e+00      0.000000e+00  \n",
       "5       0.000000e+00      0.000000e+00  \n",
       "6       0.000000e+00      0.000000e+00  \n",
       "7       0.000000e+00      0.000000e+00  \n",
       "8      -0.000000e+00     -0.000000e+00  \n",
       "9       0.000000e+00      0.000000e+00  \n",
       "10     -0.000000e+00     -0.000000e+00  \n",
       "11     -2.091307e-22     -2.534750e-22  \n",
       "12     -0.000000e+00     -0.000000e+00  \n",
       "13     -0.000000e+00     -0.000000e+00  \n",
       "14     -0.000000e+00      0.000000e+00  \n",
       "15      1.819463e-04      0.000000e+00  \n",
       "16     -0.000000e+00     -0.000000e+00  \n",
       "17     -0.000000e+00     -0.000000e+00  \n",
       "18     -0.000000e+00     -0.000000e+00  \n",
       "19     -0.000000e+00     -0.000000e+00  \n",
       "20      1.351130e-04      0.000000e+00  \n",
       "21     -2.018362e-04     -0.000000e+00  \n",
       "22     -0.000000e+00     -0.000000e+00  \n",
       "23      0.000000e+00      0.000000e+00  "
      ]
     },
     "execution_count": 101,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def lasso(alphas):\n",
    "    '''\n",
    "    Takes in a list of alphas. Outputs a dataframe containing the coefficients of lasso regressions from each alpha.\n",
    "    '''\n",
    "    # Create an empty data frame\n",
    "    df = pd.DataFrame()\n",
    "    \n",
    "    # Create a column of feature names\n",
    "    df['Feature Name'] = X_train1.columns\n",
    "    \n",
    "    # For each alpha value in the list of alpha values,\n",
    "    for alpha in alphas:\n",
    "        # Create a lasso regression with that alpha value,\n",
    "        lasso = Lasso(alpha=alpha)\n",
    "        \n",
    "        # Fit the lasso regression\n",
    "        lasso.fit(X_train1, Y_train1)\n",
    "        \n",
    "        # Create a column name for that alpha value\n",
    "        column_name = 'Alpha = %f' % alpha\n",
    "\n",
    "        # Create a column of coefficient values\n",
    "        df[column_name] = lasso.coef_\n",
    "        print(lasso.score(X_train1, Y_train1))\n",
    "    # Return the datafram    \n",
    "    return df\n",
    "\n",
    "lasso([.0001, .001, .01,.1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "23858"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = make_pipeline(PolynomialFeatures(2, interaction_only=False), LassoCV(eps=lasso_eps,n_alphas=lasso_nalpha,max_iter=lasso_iter,\n",
    "normalize=True,cv=5))\n",
    "model.fit(X_train,y_train)\n",
    "test_pred = np.array(model.predict(X_test))\n",
    "# RMSE=np.sqrt(np.sum(np.square(test_pred-y_test)))\n",
    "test_score = model.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Shape of passed values is (23858, 23858), indices imply (1, 23858)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m~/anaconda/envs/ipykernel_py3/lib/python3.6/site-packages/pandas/core/internals.py\u001b[0m in \u001b[0;36mcreate_block_manager_from_blocks\u001b[0;34m(blocks, axes)\u001b[0m\n\u001b[1;32m   4621\u001b[0m                 blocks = [make_block(values=blocks[0],\n\u001b[0;32m-> 4622\u001b[0;31m                                      placement=slice(0, len(axes[0])))]\n\u001b[0m\u001b[1;32m   4623\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda/envs/ipykernel_py3/lib/python3.6/site-packages/pandas/core/internals.py\u001b[0m in \u001b[0;36mmake_block\u001b[0;34m(values, placement, klass, ndim, dtype, fastpath)\u001b[0m\n\u001b[1;32m   2956\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2957\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mklass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mndim\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mndim\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfastpath\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfastpath\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mplacement\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mplacement\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2958\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda/envs/ipykernel_py3/lib/python3.6/site-packages/pandas/core/internals.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, values, placement, ndim, fastpath)\u001b[0m\n\u001b[1;32m    119\u001b[0m                              'implies %d' % (len(self.values),\n\u001b[0;32m--> 120\u001b[0;31m                                              len(self.mgr_locs)))\n\u001b[0m\u001b[1;32m    121\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Wrong number of items passed 23858, placement implies 1",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-106-12b7a98e559f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m     \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0mtest_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0mRMSE\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msquare\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_pred\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m     \u001b[0mtest_score\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda/envs/ipykernel_py3/lib/python3.6/site-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__array_wrap__\u001b[0;34m(self, result, context)\u001b[0m\n\u001b[1;32m   1153\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__array_wrap__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1154\u001b[0m         \u001b[0md\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_construct_axes_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_AXIS_ORDERS\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1155\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1156\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1157\u001b[0m     \u001b[0;31m# ideally we would define this to avoid the getattr checks, but\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda/envs/ipykernel_py3/lib/python3.6/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    359\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    360\u001b[0m                 mgr = self._init_ndarray(data, index, columns, dtype=dtype,\n\u001b[0;32m--> 361\u001b[0;31m                                          copy=copy)\n\u001b[0m\u001b[1;32m    362\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGeneratorType\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    363\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtypes\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mGeneratorType\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda/envs/ipykernel_py3/lib/python3.6/site-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_init_ndarray\u001b[0;34m(self, values, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    531\u001b[0m             \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_infer_to_datetimelike\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    532\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 533\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mcreate_block_manager_from_blocks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    534\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    535\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda/envs/ipykernel_py3/lib/python3.6/site-packages/pandas/core/internals.py\u001b[0m in \u001b[0;36mcreate_block_manager_from_blocks\u001b[0;34m(blocks, axes)\u001b[0m\n\u001b[1;32m   4629\u001b[0m         \u001b[0mblocks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'values'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mblocks\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4630\u001b[0m         \u001b[0mtot_items\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mb\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mblocks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4631\u001b[0;31m         \u001b[0mconstruction_error\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtot_items\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mblocks\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxes\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4632\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4633\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda/envs/ipykernel_py3/lib/python3.6/site-packages/pandas/core/internals.py\u001b[0m in \u001b[0;36mconstruction_error\u001b[0;34m(tot_items, block_shape, axes, e)\u001b[0m\n\u001b[1;32m   4606\u001b[0m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Empty data passed with indices specified.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4607\u001b[0m     raise ValueError(\"Shape of passed values is {0}, indices imply {1}\".format(\n\u001b[0;32m-> 4608\u001b[0;31m         passed, implied))\n\u001b[0m\u001b[1;32m   4609\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4610\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Shape of passed values is (23858, 23858), indices imply (1, 23858)"
     ]
    }
   ],
   "source": [
    "# Import function to create training and test set splits\n",
    "from sklearn.cross_validation import train_test_split\n",
    "# Import function to automatically create polynomial features! \n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "# Import Linear Regression and a regularized regression function\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import LassoCV\n",
    "# Finally, import function to make a machine learning pipeline\n",
    "from sklearn.pipeline import make_pipeline\n",
    "\n",
    "\n",
    "# Alpha (regularization strength) of LASSO regression\n",
    "lasso_eps = 0.0001\n",
    "lasso_nalpha=20\n",
    "lasso_iter=5000\n",
    "# Min and max degree of polynomials features to consider\n",
    "degree_min = 2\n",
    "degree_max = 8\n",
    "# Test/train split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_l, Y_l, test_size=test_size, random_state=seed)\n",
    "# Make a pipeline model with polynomial transformation and LASSO regression with cross-validation, run it for increasing degree of polynomial (complexity of the model)\n",
    "for degree in range(degree_min,degree_max+1):\n",
    "    model = make_pipeline(PolynomialFeatures(degree, interaction_only=False), LassoCV(eps=lasso_eps,n_alphas=lasso_nalpha,max_iter=lasso_iter,\n",
    "normalize=True,cv=5))\n",
    "    model.fit(X_train,y_train)\n",
    "    test_pred = np.array(model.predict(X_test))\n",
    "    RMSE=np.sqrt(np.sum(np.square(test_pred-y_test)))\n",
    "    test_score = model.score(X_test,y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "cor = ads.corr()\n",
    "columns= list(cor.columns.values)\n",
    "# for i in ads.corr():\n",
    "#     print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8354561841804006 \t item_collected_level \t item_sales_level\n",
      "0.9869940671504477 \t shop_star_level \t shop_review_num_level\n",
      "0.9941417041149618 \t shop_score_delivery \t shop_score_service\n",
      "0.9376561305553119 \t shop_score_description \t shop_score_service\n",
      "0.9303513146718432 \t shop_score_description \t shop_score_delivery\n",
      "0.989787409122976 \t day \t context_timestamp\n"
     ]
    }
   ],
   "source": [
    "for i in range(cor.shape[0]):\n",
    "    for j in range(i+1):\n",
    "        if cor.iloc[i,j]!=1 and cor.iloc[i,j]>0.8 or cor.iloc[i,j]<-0.8:\n",
    "            print(cor.iloc[i,j],'\\t', columns[i],'\\t', columns[j])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------------------------------------\n",
      "----------------------------------------------------------------------------------------------------\n",
      "0.08760849308065373\n",
      "----------------------------------------------------------------------------------------------------\n",
      "----------------------------------------------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "#修改为logloss而不是0 1\n",
    "Y_pred = model_all.predict_proba(X_test)\n",
    "print(\"--\"*50)\n",
    "print(\"--\"*50)\n",
    "print(log_loss(Y_test, Y_pred))\n",
    "print(\"--\"*50)\n",
    "print(\"--\"*50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# 开始测试，先输入数据和特征工程"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instance_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_category_list</th>\n",
       "      <th>item_property_list</th>\n",
       "      <th>item_brand_id</th>\n",
       "      <th>item_city_id</th>\n",
       "      <th>item_price_level</th>\n",
       "      <th>item_sales_level</th>\n",
       "      <th>item_collected_level</th>\n",
       "      <th>item_pv_level</th>\n",
       "      <th>...</th>\n",
       "      <th>context_timestamp</th>\n",
       "      <th>context_page_id</th>\n",
       "      <th>predict_category_property</th>\n",
       "      <th>shop_id</th>\n",
       "      <th>shop_review_num_level</th>\n",
       "      <th>shop_review_positive_rate</th>\n",
       "      <th>shop_star_level</th>\n",
       "      <th>shop_score_service</th>\n",
       "      <th>shop_score_delivery</th>\n",
       "      <th>shop_score_description</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2475218615076601065</td>\n",
       "      <td>2275895163219263378</td>\n",
       "      <td>7908382889764677758;8277336076276184272</td>\n",
       "      <td>2636395404473730413;7515802706813700848;302719...</td>\n",
       "      <td>7838285046767229711</td>\n",
       "      <td>7534238860363577544</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>1537885700</td>\n",
       "      <td>4005</td>\n",
       "      <td>8277336076276184272:-1;5799347067982556520:-1;...</td>\n",
       "      <td>5275548996133547595</td>\n",
       "      <td>13</td>\n",
       "      <td>0.985244</td>\n",
       "      <td>5011</td>\n",
       "      <td>0.964023</td>\n",
       "      <td>0.966550</td>\n",
       "      <td>0.955378</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>398316874173557226</td>\n",
       "      <td>7096238490711246967</td>\n",
       "      <td>7908382889764677758;5755694407684602296</td>\n",
       "      <td>5131280576272319091;2636395404473730413;734498...</td>\n",
       "      <td>8126195666233054089</td>\n",
       "      <td>3948283326616421003</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>1537862843</td>\n",
       "      <td>4001</td>\n",
       "      <td>5755694407684602296:216555019471416386,2636395...</td>\n",
       "      <td>329470548383752413</td>\n",
       "      <td>14</td>\n",
       "      <td>0.989068</td>\n",
       "      <td>5012</td>\n",
       "      <td>0.963794</td>\n",
       "      <td>0.964225</td>\n",
       "      <td>0.959134</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 26 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           instance_id              item_id  \\\n",
       "0  2475218615076601065  2275895163219263378   \n",
       "1   398316874173557226  7096238490711246967   \n",
       "\n",
       "                        item_category_list  \\\n",
       "0  7908382889764677758;8277336076276184272   \n",
       "1  7908382889764677758;5755694407684602296   \n",
       "\n",
       "                                  item_property_list        item_brand_id  \\\n",
       "0  2636395404473730413;7515802706813700848;302719...  7838285046767229711   \n",
       "1  5131280576272319091;2636395404473730413;734498...  8126195666233054089   \n",
       "\n",
       "          item_city_id  item_price_level  item_sales_level  \\\n",
       "0  7534238860363577544                 7                 6   \n",
       "1  3948283326616421003                 6                 9   \n",
       "\n",
       "   item_collected_level  item_pv_level           ...            \\\n",
       "0                     8             14           ...             \n",
       "1                     8             16           ...             \n",
       "\n",
       "   context_timestamp  context_page_id  \\\n",
       "0         1537885700             4005   \n",
       "1         1537862843             4001   \n",
       "\n",
       "                           predict_category_property              shop_id  \\\n",
       "0  8277336076276184272:-1;5799347067982556520:-1;...  5275548996133547595   \n",
       "1  5755694407684602296:216555019471416386,2636395...   329470548383752413   \n",
       "\n",
       "   shop_review_num_level  shop_review_positive_rate  shop_star_level  \\\n",
       "0                     13                   0.985244             5011   \n",
       "1                     14                   0.989068             5012   \n",
       "\n",
       "   shop_score_service shop_score_delivery  shop_score_description  \n",
       "0            0.964023            0.966550                0.955378  \n",
       "1            0.963794            0.964225                0.959134  \n",
       "\n",
       "[2 rows x 26 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 这里输入我们的test文件， 这样最后能形成一个output file\n",
    "submission_test = pd.read_csv('./round1_ijcai_18_test_a_20180301.txt', sep=\" \")\n",
    "\n",
    "submission_test.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "###################################          #itemid TopN          ##########################################\n",
    "\n",
    "\n",
    "gp = submission_test.groupby(by='item_id')\n",
    "newdf=gp.size().reset_index(name='times') \n",
    "\n",
    "pop_brands_low = newdf[newdf['times']<=200]['item_id'].unique()     #选100还是200\n",
    "\n",
    "\n",
    "def itemid_cvt(num):\n",
    "    if num in pop_brands_low:\n",
    "        return 1\n",
    "\n",
    "    else:\n",
    "        return num\n",
    "\n",
    "    \n",
    "submission_test['item_id'] = submission_test['item_id'].apply(itemid_cvt)\n",
    "\n",
    "le = LabelEncoder()\n",
    "le.fit(submission_test['item_id'])\n",
    "submission_test['item_id'] = le.transform(submission_test['item_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "###################################           #brand TopN       ##########################################\n",
    "gp = submission_test.groupby(by='item_brand_id')\n",
    "newdf=gp.size().reset_index(name='times') \n",
    "\n",
    "pop_brands_low = newdf[newdf['times']<=20]['item_brand_id'].unique()\n",
    "\n",
    "\n",
    "def brand_cvt(num):\n",
    "    if num in pop_brands_low:\n",
    "        return 1\n",
    "\n",
    "    else:\n",
    "        return num\n",
    "\n",
    "    \n",
    "submission_test['item_brand_id'] = submission_test['item_brand_id'].apply(brand_cvt)\n",
    "\n",
    "le = LabelEncoder()\n",
    "le.fit(submission_test['item_brand_id'])\n",
    "submission_test['item_brand_id'] = le.transform(submission_test['item_brand_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "###################################           #city TopN       ##########################################\n",
    "\n",
    "\n",
    "gp = submission_test.groupby(by='item_city_id')\n",
    "newdf=gp.size().reset_index(name='times') \n",
    "\n",
    "pop_brands_low = newdf[newdf['times']<=50]['item_city_id'].unique()\n",
    "\n",
    "\n",
    "def city_cvt(num):\n",
    "    if num in pop_brands_low:\n",
    "        return 1\n",
    "\n",
    "    else:\n",
    "        return num\n",
    "\n",
    "    \n",
    "submission_test['item_city_id'] = submission_test['item_city_id'].apply(city_cvt)\n",
    "\n",
    "le = LabelEncoder()\n",
    "le.fit(submission_test['item_city_id'])\n",
    "submission_test['item_city_id'] = le.transform(submission_test['item_city_id'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "###################################           新特征len_predcat       ##########################################\n",
    "\n",
    "#再对对item_property_list进行长度分析\n",
    "#看每一行长度,越长表明本行越长，商品信息越丰富\n",
    "df = submission_test['predict_category_property'].str.split(';',expand=True)\n",
    "df.columns = [\"len_\"+str (i) for i in range(len(df.columns))]\n",
    "submission_test.insert(20, 'len_pred_cat', df.count(axis=1) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instance_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_category_list</th>\n",
       "      <th>item_property_list</th>\n",
       "      <th>item_brand_id</th>\n",
       "      <th>item_city_id</th>\n",
       "      <th>item_price_level</th>\n",
       "      <th>item_sales_level</th>\n",
       "      <th>item_collected_level</th>\n",
       "      <th>item_pv_level</th>\n",
       "      <th>...</th>\n",
       "      <th>shop_review_positive_rate</th>\n",
       "      <th>shop_star_level</th>\n",
       "      <th>shop_score_service</th>\n",
       "      <th>shop_score_delivery</th>\n",
       "      <th>shop_score_description</th>\n",
       "      <th>time</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>user_query_day</th>\n",
       "      <th>user_query_day_hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2475218615076601065</td>\n",
       "      <td>0</td>\n",
       "      <td>7908382889764677758;8277336076276184272</td>\n",
       "      <td>2636395404473730413;7515802706813700848;302719...</td>\n",
       "      <td>162</td>\n",
       "      <td>22</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>8</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>0.985244</td>\n",
       "      <td>5011</td>\n",
       "      <td>0.964023</td>\n",
       "      <td>0.966550</td>\n",
       "      <td>0.955378</td>\n",
       "      <td>2018-09-25 10:28:20</td>\n",
       "      <td>25</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>398316874173557226</td>\n",
       "      <td>0</td>\n",
       "      <td>7908382889764677758;5755694407684602296</td>\n",
       "      <td>5131280576272319091;2636395404473730413;734498...</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>6</td>\n",
       "      <td>9</td>\n",
       "      <td>8</td>\n",
       "      <td>16</td>\n",
       "      <td>...</td>\n",
       "      <td>0.989068</td>\n",
       "      <td>5012</td>\n",
       "      <td>0.963794</td>\n",
       "      <td>0.964225</td>\n",
       "      <td>0.959134</td>\n",
       "      <td>2018-09-25 04:07:23</td>\n",
       "      <td>25</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           instance_id  item_id                       item_category_list  \\\n",
       "0  2475218615076601065        0  7908382889764677758;8277336076276184272   \n",
       "1   398316874173557226        0  7908382889764677758;5755694407684602296   \n",
       "\n",
       "                                  item_property_list  item_brand_id  \\\n",
       "0  2636395404473730413;7515802706813700848;302719...            162   \n",
       "1  5131280576272319091;2636395404473730413;734498...              0   \n",
       "\n",
       "   item_city_id  item_price_level  item_sales_level  item_collected_level  \\\n",
       "0            22                 7                 6                     8   \n",
       "1            12                 6                 9                     8   \n",
       "\n",
       "   item_pv_level         ...           shop_review_positive_rate  \\\n",
       "0             14         ...                            0.985244   \n",
       "1             16         ...                            0.989068   \n",
       "\n",
       "   shop_star_level  shop_score_service  shop_score_delivery  \\\n",
       "0             5011            0.964023             0.966550   \n",
       "1             5012            0.963794             0.964225   \n",
       "\n",
       "   shop_score_description                 time  day  hour user_query_day  \\\n",
       "0                0.955378  2018-09-25 10:28:20   25    10              2   \n",
       "1                0.959134  2018-09-25 04:07:23   25     4              2   \n",
       "\n",
       "   user_query_day_hour  \n",
       "0                    2  \n",
       "1                    2  \n",
       "\n",
       "[2 rows x 32 columns]"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##############################################################\n",
    "\n",
    "#timestamp\n",
    "\n",
    "def timestamp_datetime(value):\n",
    "    format = '%Y-%m-%d %H:%M:%S'\n",
    "    value = time.localtime(value)\n",
    "    dt = time.strftime(format, value)\n",
    "    return dt\n",
    "\n",
    "\n",
    "def convert_data(data):\n",
    "    data['time'] = data.context_timestamp.apply(timestamp_datetime)\n",
    "    data['day'] = data.time.apply(lambda x: int(x[8:10]))\n",
    "    data['hour'] = data.time.apply(lambda x: int(x[11:13]))\n",
    "    user_query_day = data.groupby(['user_id', 'day']).size(\n",
    "    ).reset_index().rename(columns={0: 'user_query_day'})\n",
    "    data = pd.merge(data, user_query_day, 'left', on=['user_id', 'day'])\n",
    "    user_query_day_hour = data.groupby(['user_id', 'day', 'hour']).size().reset_index().rename(\n",
    "        columns={0: 'user_query_day_hour'})\n",
    "    data = pd.merge(data, user_query_day_hour, 'left',\n",
    "                    on=['user_id', 'day', 'hour'])\n",
    "    \n",
    "    return data\n",
    "\n",
    "submission_test = convert_data(submission_test)\n",
    "submission_test.head(2)\n",
    "\n",
    "\n",
    "# #item几个bin特征工程\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# #bin操作item_sales_level  0,1-5,6,7,...,14,15-17\n",
    "def bin_sales(num):\n",
    "    if num in [1,2,3,4,5]:\n",
    "        num=3\n",
    "    elif num in[15,16,17]:\n",
    "        num =16\n",
    "    elif num == 0:\n",
    "        num = 1\n",
    "    else:\n",
    "        num = num\n",
    "    return num\n",
    "submission_test['item_sales_level'] = submission_test['item_sales_level'].apply(bin_sales)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# # item_collected_level   0-2, 3-5, 6-8, 9, 10, ...,15, 16-17\n",
    "def bin_collected(num):\n",
    "    if num in [0,1,2]:\n",
    "        num=1\n",
    "    elif num in[3,4,5]:\n",
    "        num =2\n",
    "    elif num in [6,7,8]:\n",
    "        num = 3\n",
    "    elif num in [16,17]:\n",
    "        num = 11\n",
    "    else:\n",
    "        num = num-5\n",
    "    return num\n",
    "\n",
    "\n",
    "submission_test['item_collected_level'] = submission_test['item_collected_level'].apply(bin_collected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(18371, 33)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#对item_property_list 进行聚类\n",
    "#用item_property_list列生成新的数据集，用于聚类\n",
    "df = submission_test['item_property_list'].str.split(';',expand=True)\n",
    "df.columns = [\"property_\"+str (i) for i in range(len(df.columns))]\n",
    "df = df.fillna(-1)\n",
    "\n",
    "#把string格式转换成integer格式来运行聚类算法\n",
    "def toInt(raw_str):\n",
    "    return int(raw_str)\n",
    "\n",
    "temp_x = [df[df.columns[i]].apply(toInt) for i in range(len(df.columns))]\n",
    "\n",
    "#把dataframe变成array作为聚类算法的输入\n",
    "item_property_list = pd.concat(temp_x, axis=1)\n",
    "X = item_property_list.as_matrix()\n",
    "\n",
    "#商品总共14个类别，所以针对property取14个cluster\n",
    "kmeans = KMeans(n_clusters=100)\n",
    "kmeans.fit(X)\n",
    "\n",
    "centroids = kmeans.cluster_centers_\n",
    "labels = kmeans.labels_\n",
    "submission_test.insert(22, 'property_label', labels)\n",
    "submission_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instance_id</th>\n",
       "      <th>item_id</th>\n",
       "      <th>item_category_list</th>\n",
       "      <th>item_property_list</th>\n",
       "      <th>item_brand_id</th>\n",
       "      <th>item_city_id</th>\n",
       "      <th>item_price_level</th>\n",
       "      <th>item_sales_level</th>\n",
       "      <th>item_collected_level</th>\n",
       "      <th>item_pv_level</th>\n",
       "      <th>...</th>\n",
       "      <th>shop_review_positive_rate</th>\n",
       "      <th>shop_star_level</th>\n",
       "      <th>shop_score_service</th>\n",
       "      <th>shop_score_delivery</th>\n",
       "      <th>shop_score_description</th>\n",
       "      <th>time</th>\n",
       "      <th>day</th>\n",
       "      <th>hour</th>\n",
       "      <th>user_query_day</th>\n",
       "      <th>user_query_day_hour</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2475218615076601065</td>\n",
       "      <td>0</td>\n",
       "      <td>7908382889764677758;8277336076276184272</td>\n",
       "      <td>2636395404473730413;7515802706813700848;302719...</td>\n",
       "      <td>162</td>\n",
       "      <td>22</td>\n",
       "      <td>7</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>14</td>\n",
       "      <td>...</td>\n",
       "      <td>0.985244</td>\n",
       "      <td>5011</td>\n",
       "      <td>0.964023</td>\n",
       "      <td>0.96655</td>\n",
       "      <td>0.955378</td>\n",
       "      <td>2018-09-25 10:28:20</td>\n",
       "      <td>25</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1 rows × 34 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           instance_id  item_id                       item_category_list  \\\n",
       "0  2475218615076601065        0  7908382889764677758;8277336076276184272   \n",
       "\n",
       "                                  item_property_list  item_brand_id  \\\n",
       "0  2636395404473730413;7515802706813700848;302719...            162   \n",
       "\n",
       "   item_city_id  item_price_level  item_sales_level  item_collected_level  \\\n",
       "0            22                 7                 6                     3   \n",
       "\n",
       "   item_pv_level         ...           shop_review_positive_rate  \\\n",
       "0             14         ...                            0.985244   \n",
       "\n",
       "   shop_star_level  shop_score_service  shop_score_delivery  \\\n",
       "0             5011            0.964023              0.96655   \n",
       "\n",
       "   shop_score_description                 time  day  hour user_query_day  \\\n",
       "0                0.955378  2018-09-25 10:28:20   25    10              2   \n",
       "\n",
       "   user_query_day_hour  \n",
       "0                    2  \n",
       "\n",
       "[1 rows x 34 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#再对对item_property_list进行长度分析\n",
    "#看每一行长度,越长表明本行越长，商品信息越丰富\n",
    "df = submission_test['item_property_list'].str.split(';',expand=True)\n",
    "df.columns = [\"property_\"+str (i) for i in range(len(df.columns))]\n",
    "submission_test.insert(20, 'len_property', df.count(axis=1) )\n",
    "submission_test.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# #函数用来分解item_category_list\n",
    "def split_fst(str1= None):\n",
    "    \"\"\"\n",
    "    this is to split the combined attributes\n",
    "    \"\"\"\n",
    "    if ';' not in str1:\n",
    "        return str1\n",
    "    else:\n",
    "        pos = str1.index(';')\n",
    "        return str1[:pos]\n",
    "\n",
    "\n",
    "def split_snd(str1 = None):\n",
    "    \"\"\"\n",
    "    this is to split the combined attributes\n",
    "    \"\"\"\n",
    "    if ';' not in str1:\n",
    "        return str1\n",
    "    else:\n",
    "        pos = str1.index(';')\n",
    "        return str1[pos+1:]\n",
    "\n",
    "\n",
    "submission_test['item_category_list'] = submission_test['item_category_list'].apply(split_snd)\n",
    "submission_test['item_category_list'] = submission_test['item_category_list'].apply(split_snd)\n",
    "submission_test['item_category_list'] = submission_test['item_category_list'].apply(lambda x: int(x))\n",
    "submission_test['item_category_list'].unique() \n",
    "\n",
    "\n",
    "#对category进行label encoder\n",
    "le = LabelEncoder()\n",
    "le.fit(submission_test['item_category_list'].unique())\n",
    "submission_test['item_category_list'] = le.transform(submission_test['item_category_list'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "features = ['item_brand_id', 'item_city_id', 'item_price_level', 'item_sales_level',\n",
    "       'item_collected_level', 'item_pv_level', 'user_gender_id',\n",
    "       'user_age_level', 'user_occupation_id', 'user_star_level',\n",
    "        'context_page_id',\n",
    "       'shop_id', 'shop_review_num_level', 'shop_review_positive_rate',\n",
    "       'property_label','len_property',  'shop_star_level', 'shop_score_service',\n",
    "       'shop_score_delivery', 'shop_score_description',\n",
    "        'hour', 'user_query_day', 'user_query_day_hour','len_pred_cat']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "sub_pred = model_all.predict_proba(submission_test[features])[:, 1]\n",
    "submission_test['predicted_score'] = sub_pred\n",
    "submission_test[['instance_id', 'predicted_score']].to_csv('./model_all.txt', index=False, sep=' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instance_id</th>\n",
       "      <th>predicted_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2475218615076601065</td>\n",
       "      <td>0.011258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>398316874173557226</td>\n",
       "      <td>0.031412</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           instance_id  predicted_score\n",
       "0  2475218615076601065         0.011258\n",
       "1   398316874173557226         0.031412"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hh = pd.read_csv('./model_all.txt', sep=' ')\n",
    "hh.head(2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>instance_id</th>\n",
       "      <th>predicted_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2475218615076601065</td>\n",
       "      <td>0.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>398316874173557226</td>\n",
       "      <td>0.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6586402638209028583</td>\n",
       "      <td>0.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1040996105851528465</td>\n",
       "      <td>0.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6316278569655873454</td>\n",
       "      <td>0.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           instance_id  predicted_score\n",
       "0  2475218615076601065              0.9\n",
       "1   398316874173557226              0.7\n",
       "2  6586402638209028583              0.5\n",
       "3  1040996105851528465              0.3\n",
       "4  6316278569655873454              0.1"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv('./round1_ijcai_18_result_demo_20180301.txt', sep=' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "################################################################################################################\n",
    "#####################################        生成与提交test结果          ############################################## \n",
    "\n",
    "\n",
    "# 这里重新写！！！\n",
    "\n",
    "\n",
    "# 这里输入我们的test文件， 这样最后能形成一个output file\n",
    "# sub_test = pd.read_csv('./round1_ijcai_18_test_a_20180301.txt', sep=\" \")\n",
    "# del sub_test['item_property_list']\n",
    "# del sub_test['item_category_list']\n",
    "# del sub_test['predict_category_property']\n",
    "# temp = sub_test.iloc[:,[2,3,4,5,6,7,9,10,11,12,14,15,17,18,19,20,21,22]]\n",
    "# temp.head(2)\n",
    "\n",
    "\n",
    "###出结果！！！"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# sub_pred = model_all.predict_proba(temp)[:, 1]\n",
    "# sub_test['predicted_score'] = sub_pred\n",
    "# sub_test[['instance_id', 'predicted_score']].to_csv('model_all.csv', index=False,sep=' ')\n",
    "# #保存在线提交结果"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# model_item = XGBClassifier()  #建模\n",
    "\n",
    "# #调参：最佳学习率\n",
    "# learning_rate = [0.001, 0.005, 0.01, 0.05, 0.1, 0.2, 0.3]\n",
    "# param_grid = dict(learning_rate=learning_rate)\n",
    "# kfold = StratifiedKFold(n_splits=12, shuffle=True, random_state=7)\n",
    "\n",
    "# #使用grid_search, 一般还有random search（最后结果可能稍逊，但是时间省太太太多）\n",
    "# grid_search = GridSearchCV(model_item, param_grid, scoring=\"neg_log_loss\", n_jobs=-1, cv=kfold)\n",
    "# grid_result = grid_search.fit(X, Y)\n",
    "\n",
    "# means = grid_result.cv_results_['mean_test_score']\n",
    "# stds = grid_result.cv_results_['std_test_score']\n",
    "# params = grid_result.cv_results_['params']\n",
    "# for mean, stdev, param in zip(means, stds, params):\n",
    "#     print(\"%f (%f) with: %r\" % (mean, stdev, param))\n",
    "\n",
    "\n",
    "# eval_set = [(X_test, Y_test)]\n",
    "# model_item.fit(X_train, Y_train, early_stopping_rounds=20, eval_metric=\"auc\", eval_set=eval_set, verbose=True)\n",
    "# #here logloss\n",
    "# #we use auc to deal with imbalanced\n",
    "\n",
    "\n",
    "# plot_importance(model_item)   #feature重要程度\n",
    "# pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
